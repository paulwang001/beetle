namespace LuffaSDK {
  u64 public_key_to_id(sequence<u8> public_key);
};

dictionary ChatSession {
   u64 did;
   u8 session_type;
   u64 last_time;
   string tag;
   u64 read_crc;
   sequence<u64> reach_crc;
   string last_msg;
};

dictionary ContactsView {
  u64 did;
  string tag;
};

dictionary EventMeta {
    u64 from_id;
    u64 to_id;
    string from_tag;
    string to_tag;
    u64 event_time;
    sequence<u8> msg;
};

[Error]
enum ClientError {
  "CodeParser",
  "SendFailed",
  "StartFailed",
  "SearchError",
  "SledError",
  "ParseIntError",
  "ParseFloatError",
  "FromUtf8Error",
  "TantivyError",
  "SerdeCborError",
  "CustomError"
};

callback interface Callback {
    void on_message(u64 crc,u64 from,u64 to,sequence<u8> msg);
};

interface Client {
    
    constructor();

    string? show_code();

    u64 contacts_offer([ByRef] string code);
    string gen_offer_code(u64 did);
    u64 contacts_group_create(sequence<u64> invitee,string? tag);
    u64 contacts_anwser(u64 to,u64 offer_id,sequence<u8> secret_key);

    u64 send_msg(u64 to,sequence<u8> msg);

    u64? get_local_id();

    string? get_peer_id();

    string? get_did();

    sequence<string> relay_list();
    sequence<string> keys();

    boolean connect(string peer_id);

    void init(string? cfg_path);
    u64 start(string? key,string? tag,Callback cb);

    void stop();

    void save_session(u64 did,string tag,u64? read,u64? reach,string? msg);

    [Throws=ClientError]
    sequence<ChatSession> session_list(u32 top);
    sequence<ChatSession> session_page(u32 page,u32 size);


    [Throws=ClientError]
    sequence<ContactsView> contacts_list(u8 c_type);

    [Throws=ClientError] 
    sequence<string> search(string query,u32 offet,u32 limit);

    [Throws=ClientError]
    sequence<u64> recent_messages(u64 did,u32 top);

    string? find_contacts_tag(u64 did);

    [Throws=ClientError]
    EventMeta meta_msg([ByRef] sequence<u8> data);
    [Throws=ClientError]
    EventMeta? read_msg_with_meta(u64 did,u64 crc);

    string? gen_key([ByRef] string password,boolean store);

    string? import_key([ByRef] string phrase,[ByRef] string password);

    boolean save_key([ByRef] string name);

    boolean remove_key([ByRef] string name);

    [Throws=ClientError]
    string? read_key_phrase([ByRef] string name);


};