namespace LuffaSDK {
  u64 public_key_to_id([ByRef] sequence<u8> public_key);
  [Throws=ClientError]
  u64 bs58_decode([ByRef] string data);
  [Throws=ClientError]
  string bs58_encode(u64 data);
};

dictionary ChatSession {
   u64 did;
   u8 session_type;
   u64 last_time;
   string tag;
   u64 read_crc;
   sequence<u64> reach_crc;
   string last_msg;
   boolean enabled_silent;
   u8 last_msg_status;
};

dictionary ContactsView {
  u64 did;
  string tag;
  u8 c_type;
};

dictionary ContactsGroupView {
    u64 did;
    string tag;
    u8 c_type;
    u64 count;
	boolean is_manager;
};

dictionary GroupInfo{
	u64 total_count;
    sequence<GroupMemberNickname> members;
};

dictionary GroupMemberNickname {
   u64 u_id;
   string nickname;
   u8 status;
};

enum OfferStatus {
  "Offer",
  "Answer",
  "Reject"
};


enum OfferRole {
    "Applicant",
    "Acceptor",
};

dictionary OfferView {
  u64 did;
  string bs_did;
  u64 offer_crc;
  string tag;
  OfferStatus status;
  OfferRole role;
  u64 event_time;
};

dictionary EventMeta {
    u64 from_id;
    u64 to_id;
    u8 session_type;
    string from_tag;
    string to_tag;
    u64 event_time;
    u32 status;
    sequence<u8> msg;
};

[Error]
enum ClientError {
  "CodeParser",
  "SendFailed",
  "StartFailed",
  "SearchError",
  "SledError",
  "ParseIntError",
  "ParseFloatError",
  "FromUtf8Error",
  "TantivyError",
  "SerdeCborError",
  "IoError",
  "AnyhowError",
  "MultibaseError",
  "MultihashError",
  "Bs58DecodeError",
  "DecodingError",
  "SerdeJsonError",
  "CustomError"
};


callback interface Callback {
    void on_message(u64 crc,u64 from,u64 to,u64 event_time,sequence<u8> msg);
};

interface Client {

    constructor();

	  [Throws=ClientError]
    string? get_current_user();

    [Throws=ClientError]
    string? share([ByRef] string domain_name, [ByRef] string link_type);

    [Throws=ClientError]
    string? show_code([ByRef] string domain_name, [ByRef] string link_type);
    
    [Throws=ClientError]
    u64 contacts_offer([ByRef] string code);
    
    [Throws=ClientError]
    string gen_offer_code(u64 did);
    
    [Throws=ClientError]
    u64 contacts_group_create(sequence<u64> invitee,string? tag);
    
    [Throws=ClientError]
    boolean contacts_group_invite_member(u64 g_id, sequence<u64> invitee);

    [Throws=ClientError]
    GroupInfo contacts_group_members(u64 g_id, u64 page_no, u64 page_size);

    [Throws=ClientError]
    u64 contacts_anwser(u64 did,u64 crc);
    [Throws=ClientError]
    u64 contacts_reject(u64 did,u64 crc);
    
    [Throws=ClientError]
    u64 send_msg(u64 to,sequence<u8> msg);

    [Throws=ClientError]
    u64? get_local_id();

    [Throws=ClientError]
    string? get_peer_id();

    [Throws=ClientError]
    string? get_did();

    [Throws=ClientError]
    sequence<string> relay_list();

    [Throws=ClientError]
    sequence<string> keys();

    [Throws=ClientError]
    boolean connect(string peer_id);

    [Throws=ClientError]
    boolean disconnect();

    [Throws=ClientError]
    void init(string? cfg_path);
    [Throws=ClientError]
    void init_with_env_name([ByRef] string name, u64 timeout_ms, boolean always_fetch_file, boolean fetch_failed_ret);

    [Throws=ClientError]
    u64 start(string? key,string? tag,Callback cb);

    [Throws=ClientError]
    void stop();

    [Throws=ClientError]
    void save_session(u64 did,string tag,u64? read,u64? reach,string? msg);

    [Throws=ClientError]
    sequence<ChatSession> session_list(u32 top);

    [Throws=ClientError]
    sequence<ChatSession> session_page(u32 page,u32 size);
 
    [Throws=ClientError]
    sequence<ContactsView> contacts_search(u8 c_type,[ByRef] string pattern);
    [Throws=ClientError]
    sequence<ContactsView> contacts_search_determinate(u8 c_type,[ByRef] string pattern);


    [Throws=ClientError]
    sequence<ContactsGroupView> groups();

    [Throws=ClientError]
    sequence<ContactsView> contacts_list(u8 c_type);

    [Throws=ClientError]
    sequence<string> search(string query,u32 offet,u32 limit);

    [Throws=ClientError]
    sequence<u64> recent_messages(u64 did,u32 offset,u32 limit);

    [Throws=ClientError]
    sequence<OfferView> recent_offser(u32 top);

    [Throws=ClientError]
    string? find_contacts_tag(u64 did);

    [Throws=ClientError]
    EventMeta meta_msg([ByRef] sequence<u8> data);

    [Throws=ClientError]
    EventMeta? read_msg_with_meta(u64 did,u64 crc);
    [Throws=ClientError]
    EventMeta? read_msg_meta_without_chat_session(u64 did,u64 crc);
    [Throws=ClientError]
    EventMeta? last_chat_msg_with_meta(u64 did);
    [Throws=ClientError]
    EventMeta? last_user_msg_with_meta(u64 did);

    [Throws=ClientError]
    string? gen_key([ByRef] string password,boolean store);

    [Throws=ClientError]
    string? import_key([ByRef] string phrase,[ByRef] string password);

    [Throws=ClientError]
    boolean save_key([ByRef] string name);

    [Throws=ClientError]
    boolean remove_key([ByRef] string name);

    [Throws=ClientError]
    string? read_key_phrase([ByRef] string name);

    [Throws=ClientError]
    string generate_avatar([ByRef] string peer_id);

    [Throws=ClientError]
    string generate_nickname([ByRef] string peer_id);

    [Throws=ClientError]
    void remove_local_msg(u64 did,u64 crc);
    [Throws=ClientError]
    void remove_offser(u64 did,u64 crc);

    [Throws=ClientError]
    void enable_silent(u64 did);

    [Throws=ClientError]
    void disable_silent(u64 did);
};