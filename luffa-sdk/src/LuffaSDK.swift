// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(LuffaSDKFFI)
import LuffaSDKFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_LuffaSDK_d7c_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_LuffaSDK_d7c_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterBool : FfiConverter {
    typealias FfiType = Int8
    typealias SwiftType = Bool

    public static func lift(_ value: Int8) throws -> Bool {
        return value != 0
    }

    public static func lower(_ value: Bool) -> Int8 {
        return value ? 1 : 0
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Bool {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: Bool, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public protocol ClientProtocol {
    func `getCurrentUser`() throws -> String?
    func `share`(`domainName`: String, `linkType`: String) throws -> String?
    func `showCode`(`domainName`: String, `linkType`: String) throws -> String?
    func `contactsOffer`(`code`: String) throws -> UInt64
    func `genOfferCode`(`did`: UInt64) throws -> String
    func `contactsGroupCreate`(`invitee`: [UInt64], `tag`: String?) throws -> UInt64
    func `contactsGroupInviteMember`(`gId`: UInt64, `invitee`: [UInt64]) throws -> Bool
    func `contactsGroupMembers`(`gId`: UInt64, `pageNo`: UInt64, `pageSize`: UInt64) throws -> [GroupMemberNickname]
    func `contactsAnwser`(`did`: UInt64, `crc`: UInt64) throws -> UInt64
    func `contactsReject`(`did`: UInt64, `crc`: UInt64) throws -> UInt64
    func `sendMsg`(`to`: UInt64, `msg`: [UInt8]) throws -> UInt64
    func `getLocalId`() throws -> UInt64?
    func `getPeerId`() throws -> String?
    func `getDid`() throws -> String?
    func `relayList`() throws -> [String]
    func `keys`() throws -> [String]
    func `connect`(`peerId`: String) throws -> Bool
    func `disconnect`() throws -> Bool
    func `init`(`cfgPath`: String?) throws
    func `initWithEnvName`(`name`: String, `timeoutMs`: UInt64, `alwaysFetchFile`: Bool, `fetchFailedRet`: Bool) throws
    func `start`(`key`: String?, `tag`: String?, `cb`: Callback) throws -> UInt64
    func `stop`() throws
    func `saveSession`(`did`: UInt64, `tag`: String, `read`: UInt64?, `reach`: UInt64?, `msg`: String?) throws
    func `sessionList`(`top`: UInt32) throws -> [ChatSession]
    func `sessionPage`(`page`: UInt32, `size`: UInt32) throws -> [ChatSession]
    func `contactsSearch`(`cType`: UInt8, `pattern`: String) throws -> [ContactsView]
    func `contactsSearchDeterminate`(`cType`: UInt8, `pattern`: String) throws -> [ContactsView]
    func `groups`() throws -> [ContactsGroupView]
    func `contactsList`(`cType`: UInt8) throws -> [ContactsView]
    func `search`(`query`: String, `offet`: UInt32, `limit`: UInt32) throws -> [String]
    func `recentMessages`(`did`: UInt64, `offset`: UInt32, `limit`: UInt32) throws -> [UInt64]
    func `recentOffser`(`top`: UInt32) throws -> [OfferView]
    func `findContactsTag`(`did`: UInt64) throws -> String?
    func `metaMsg`(`data`: [UInt8]) throws -> EventMeta
    func `readMsgWithMeta`(`did`: UInt64, `crc`: UInt64) throws -> EventMeta?
    func `readMsgMetaWithoutChatSession`(`did`: UInt64, `crc`: UInt64) throws -> EventMeta?
    func `lastChatMsgWithMeta`(`did`: UInt64) throws -> EventMeta?
    func `lastUserMsgWithMeta`(`did`: UInt64) throws -> EventMeta?
    func `genKey`(`password`: String, `store`: Bool) throws -> String?
    func `importKey`(`phrase`: String, `password`: String) throws -> String?
    func `saveKey`(`name`: String) throws -> Bool
    func `removeKey`(`name`: String) throws -> Bool
    func `readKeyPhrase`(`name`: String) throws -> String?
    func `generateAvatar`(`peerId`: String) throws -> String
    func `generateNickname`(`peerId`: String) throws -> String
    func `removeLocalMsg`(`did`: UInt64, `crc`: UInt64) throws
    func `removeOffser`(`did`: UInt64, `crc`: UInt64) throws
    func `enableSilent`(`did`: UInt64) throws
    func `disableSilent`(`did`: UInt64) throws
    
}

public class Client: ClientProtocol {
    fileprivate let pointer: UnsafeMutableRawPointer

    // TODO: We'd like this to be `private` but for Swifty reasons,
    // we can't implement `FfiConverter` without making this `required` and we can't
    // make it `required` without making it `public`.
    required init(unsafeFromRawPointer pointer: UnsafeMutableRawPointer) {
        self.pointer = pointer
    }
    public convenience init()  {
        self.init(unsafeFromRawPointer: try!
    
    rustCall() {
    
    LuffaSDK_d7c_Client_new($0)
})
    }

    deinit {
        try! rustCall { ffi_LuffaSDK_d7c_Client_object_free(pointer, $0) }
    }

    

    
    public func `getCurrentUser`() throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_get_current_user(self.pointer, $0
    )
}
        )
    }
    public func `share`(`domainName`: String, `linkType`: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_share(self.pointer, 
        FfiConverterString.lower(`domainName`), 
        FfiConverterString.lower(`linkType`), $0
    )
}
        )
    }
    public func `showCode`(`domainName`: String, `linkType`: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_show_code(self.pointer, 
        FfiConverterString.lower(`domainName`), 
        FfiConverterString.lower(`linkType`), $0
    )
}
        )
    }
    public func `contactsOffer`(`code`: String) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_offer(self.pointer, 
        FfiConverterString.lower(`code`), $0
    )
}
        )
    }
    public func `genOfferCode`(`did`: UInt64) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_gen_offer_code(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
        )
    }
    public func `contactsGroupCreate`(`invitee`: [UInt64], `tag`: String?) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_group_create(self.pointer, 
        FfiConverterSequenceUInt64.lower(`invitee`), 
        FfiConverterOptionString.lower(`tag`), $0
    )
}
        )
    }
    public func `contactsGroupInviteMember`(`gId`: UInt64, `invitee`: [UInt64]) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_group_invite_member(self.pointer, 
        FfiConverterUInt64.lower(`gId`), 
        FfiConverterSequenceUInt64.lower(`invitee`), $0
    )
}
        )
    }
    public func `contactsGroupMembers`(`gId`: UInt64, `pageNo`: UInt64, `pageSize`: UInt64) throws -> [GroupMemberNickname] {
        return try FfiConverterSequenceTypeGroupMemberNickname.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_group_members(self.pointer, 
        FfiConverterUInt64.lower(`gId`), 
        FfiConverterUInt64.lower(`pageNo`), 
        FfiConverterUInt64.lower(`pageSize`), $0
    )
}
        )
    }
    public func `contactsAnwser`(`did`: UInt64, `crc`: UInt64) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_anwser(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
        )
    }
    public func `contactsReject`(`did`: UInt64, `crc`: UInt64) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_reject(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
        )
    }
    public func `sendMsg`(`to`: UInt64, `msg`: [UInt8]) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_send_msg(self.pointer, 
        FfiConverterUInt64.lower(`to`), 
        FfiConverterSequenceUInt8.lower(`msg`), $0
    )
}
        )
    }
    public func `getLocalId`() throws -> UInt64? {
        return try FfiConverterOptionUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_get_local_id(self.pointer, $0
    )
}
        )
    }
    public func `getPeerId`() throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_get_peer_id(self.pointer, $0
    )
}
        )
    }
    public func `getDid`() throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_get_did(self.pointer, $0
    )
}
        )
    }
    public func `relayList`() throws -> [String] {
        return try FfiConverterSequenceString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_relay_list(self.pointer, $0
    )
}
        )
    }
    public func `keys`() throws -> [String] {
        return try FfiConverterSequenceString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_keys(self.pointer, $0
    )
}
        )
    }
    public func `connect`(`peerId`: String) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_connect(self.pointer, 
        FfiConverterString.lower(`peerId`), $0
    )
}
        )
    }
    public func `disconnect`() throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_disconnect(self.pointer, $0
    )
}
        )
    }
    public func `init`(`cfgPath`: String?) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_init(self.pointer, 
        FfiConverterOptionString.lower(`cfgPath`), $0
    )
}
    }
    public func `initWithEnvName`(`name`: String, `timeoutMs`: UInt64, `alwaysFetchFile`: Bool, `fetchFailedRet`: Bool) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_init_with_env_name(self.pointer, 
        FfiConverterString.lower(`name`), 
        FfiConverterUInt64.lower(`timeoutMs`), 
        FfiConverterBool.lower(`alwaysFetchFile`), 
        FfiConverterBool.lower(`fetchFailedRet`), $0
    )
}
    }
    public func `start`(`key`: String?, `tag`: String?, `cb`: Callback) throws -> UInt64 {
        return try FfiConverterUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_start(self.pointer, 
        FfiConverterOptionString.lower(`key`), 
        FfiConverterOptionString.lower(`tag`), 
        FfiConverterCallbackInterfaceCallback.lower(`cb`), $0
    )
}
        )
    }
    public func `stop`() throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_stop(self.pointer, $0
    )
}
    }
    public func `saveSession`(`did`: UInt64, `tag`: String, `read`: UInt64?, `reach`: UInt64?, `msg`: String?) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_save_session(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterString.lower(`tag`), 
        FfiConverterOptionUInt64.lower(`read`), 
        FfiConverterOptionUInt64.lower(`reach`), 
        FfiConverterOptionString.lower(`msg`), $0
    )
}
    }
    public func `sessionList`(`top`: UInt32) throws -> [ChatSession] {
        return try FfiConverterSequenceTypeChatSession.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_session_list(self.pointer, 
        FfiConverterUInt32.lower(`top`), $0
    )
}
        )
    }
    public func `sessionPage`(`page`: UInt32, `size`: UInt32) throws -> [ChatSession] {
        return try FfiConverterSequenceTypeChatSession.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_session_page(self.pointer, 
        FfiConverterUInt32.lower(`page`), 
        FfiConverterUInt32.lower(`size`), $0
    )
}
        )
    }
    public func `contactsSearch`(`cType`: UInt8, `pattern`: String) throws -> [ContactsView] {
        return try FfiConverterSequenceTypeContactsView.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_search(self.pointer, 
        FfiConverterUInt8.lower(`cType`), 
        FfiConverterString.lower(`pattern`), $0
    )
}
        )
    }
    public func `contactsSearchDeterminate`(`cType`: UInt8, `pattern`: String) throws -> [ContactsView] {
        return try FfiConverterSequenceTypeContactsView.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_search_determinate(self.pointer, 
        FfiConverterUInt8.lower(`cType`), 
        FfiConverterString.lower(`pattern`), $0
    )
}
        )
    }
    public func `groups`() throws -> [ContactsGroupView] {
        return try FfiConverterSequenceTypeContactsGroupView.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_groups(self.pointer, $0
    )
}
        )
    }
    public func `contactsList`(`cType`: UInt8) throws -> [ContactsView] {
        return try FfiConverterSequenceTypeContactsView.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_contacts_list(self.pointer, 
        FfiConverterUInt8.lower(`cType`), $0
    )
}
        )
    }
    public func `search`(`query`: String, `offet`: UInt32, `limit`: UInt32) throws -> [String] {
        return try FfiConverterSequenceString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_search(self.pointer, 
        FfiConverterString.lower(`query`), 
        FfiConverterUInt32.lower(`offet`), 
        FfiConverterUInt32.lower(`limit`), $0
    )
}
        )
    }
    public func `recentMessages`(`did`: UInt64, `offset`: UInt32, `limit`: UInt32) throws -> [UInt64] {
        return try FfiConverterSequenceUInt64.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_recent_messages(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt32.lower(`offset`), 
        FfiConverterUInt32.lower(`limit`), $0
    )
}
        )
    }
    public func `recentOffser`(`top`: UInt32) throws -> [OfferView] {
        return try FfiConverterSequenceTypeOfferView.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_recent_offser(self.pointer, 
        FfiConverterUInt32.lower(`top`), $0
    )
}
        )
    }
    public func `findContactsTag`(`did`: UInt64) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_find_contacts_tag(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
        )
    }
    public func `metaMsg`(`data`: [UInt8]) throws -> EventMeta {
        return try FfiConverterTypeEventMeta.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_meta_msg(self.pointer, 
        FfiConverterSequenceUInt8.lower(`data`), $0
    )
}
        )
    }
    public func `readMsgWithMeta`(`did`: UInt64, `crc`: UInt64) throws -> EventMeta? {
        return try FfiConverterOptionTypeEventMeta.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_read_msg_with_meta(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
        )
    }
    public func `readMsgMetaWithoutChatSession`(`did`: UInt64, `crc`: UInt64) throws -> EventMeta? {
        return try FfiConverterOptionTypeEventMeta.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_read_msg_meta_without_chat_session(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
        )
    }
    public func `lastChatMsgWithMeta`(`did`: UInt64) throws -> EventMeta? {
        return try FfiConverterOptionTypeEventMeta.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_last_chat_msg_with_meta(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
        )
    }
    public func `lastUserMsgWithMeta`(`did`: UInt64) throws -> EventMeta? {
        return try FfiConverterOptionTypeEventMeta.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_last_user_msg_with_meta(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
        )
    }
    public func `genKey`(`password`: String, `store`: Bool) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_gen_key(self.pointer, 
        FfiConverterString.lower(`password`), 
        FfiConverterBool.lower(`store`), $0
    )
}
        )
    }
    public func `importKey`(`phrase`: String, `password`: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_import_key(self.pointer, 
        FfiConverterString.lower(`phrase`), 
        FfiConverterString.lower(`password`), $0
    )
}
        )
    }
    public func `saveKey`(`name`: String) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_save_key(self.pointer, 
        FfiConverterString.lower(`name`), $0
    )
}
        )
    }
    public func `removeKey`(`name`: String) throws -> Bool {
        return try FfiConverterBool.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_remove_key(self.pointer, 
        FfiConverterString.lower(`name`), $0
    )
}
        )
    }
    public func `readKeyPhrase`(`name`: String) throws -> String? {
        return try FfiConverterOptionString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_read_key_phrase(self.pointer, 
        FfiConverterString.lower(`name`), $0
    )
}
        )
    }
    public func `generateAvatar`(`peerId`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_generate_avatar(self.pointer, 
        FfiConverterString.lower(`peerId`), $0
    )
}
        )
    }
    public func `generateNickname`(`peerId`: String) throws -> String {
        return try FfiConverterString.lift(
            try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_generate_nickname(self.pointer, 
        FfiConverterString.lower(`peerId`), $0
    )
}
        )
    }
    public func `removeLocalMsg`(`did`: UInt64, `crc`: UInt64) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_remove_local_msg(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
    }
    public func `removeOffser`(`did`: UInt64, `crc`: UInt64) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_remove_offser(self.pointer, 
        FfiConverterUInt64.lower(`did`), 
        FfiConverterUInt64.lower(`crc`), $0
    )
}
    }
    public func `enableSilent`(`did`: UInt64) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_enable_silent(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
    }
    public func `disableSilent`(`did`: UInt64) throws {
        try
    rustCallWithError(FfiConverterTypeClientError.self) {
    LuffaSDK_d7c_Client_disable_silent(self.pointer, 
        FfiConverterUInt64.lower(`did`), $0
    )
}
    }
    
}


public struct FfiConverterTypeClient: FfiConverter {
    typealias FfiType = UnsafeMutableRawPointer
    typealias SwiftType = Client

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Client {
        let v: UInt64 = try readInt(&buf)
        // The Rust code won't compile if a pointer won't fit in a UInt64.
        // We have to go via `UInt` because that's the thing that's the size of a pointer.
        let ptr = UnsafeMutableRawPointer(bitPattern: UInt(truncatingIfNeeded: v))
        if (ptr == nil) {
            throw UniffiInternalError.unexpectedNullPointer
        }
        return try lift(ptr!)
    }

    public static func write(_ value: Client, into buf: inout [UInt8]) {
        // This fiddling is because `Int` is the thing that's the same size as a pointer.
        // The Rust code won't compile if a pointer won't fit in a `UInt64`.
        writeInt(&buf, UInt64(bitPattern: Int64(Int(bitPattern: lower(value)))))
    }

    public static func lift(_ pointer: UnsafeMutableRawPointer) throws -> Client {
        return Client(unsafeFromRawPointer: pointer)
    }

    public static func lower(_ value: Client) -> UnsafeMutableRawPointer {
        return value.pointer
    }
}


public struct ChatSession {
    public var `did`: UInt64
    public var `sessionType`: UInt8
    public var `lastTime`: UInt64
    public var `tag`: String
    public var `readCrc`: UInt64
    public var `reachCrc`: [UInt64]
    public var `lastMsg`: String
    public var `enabledSilent`: Bool
    public var `lastMsgStatus`: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`did`: UInt64, `sessionType`: UInt8, `lastTime`: UInt64, `tag`: String, `readCrc`: UInt64, `reachCrc`: [UInt64], `lastMsg`: String, `enabledSilent`: Bool, `lastMsgStatus`: UInt8) {
        self.`did` = `did`
        self.`sessionType` = `sessionType`
        self.`lastTime` = `lastTime`
        self.`tag` = `tag`
        self.`readCrc` = `readCrc`
        self.`reachCrc` = `reachCrc`
        self.`lastMsg` = `lastMsg`
        self.`enabledSilent` = `enabledSilent`
        self.`lastMsgStatus` = `lastMsgStatus`
    }
}


extension ChatSession: Equatable, Hashable {
    public static func ==(lhs: ChatSession, rhs: ChatSession) -> Bool {
        if lhs.`did` != rhs.`did` {
            return false
        }
        if lhs.`sessionType` != rhs.`sessionType` {
            return false
        }
        if lhs.`lastTime` != rhs.`lastTime` {
            return false
        }
        if lhs.`tag` != rhs.`tag` {
            return false
        }
        if lhs.`readCrc` != rhs.`readCrc` {
            return false
        }
        if lhs.`reachCrc` != rhs.`reachCrc` {
            return false
        }
        if lhs.`lastMsg` != rhs.`lastMsg` {
            return false
        }
        if lhs.`enabledSilent` != rhs.`enabledSilent` {
            return false
        }
        if lhs.`lastMsgStatus` != rhs.`lastMsgStatus` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`did`)
        hasher.combine(`sessionType`)
        hasher.combine(`lastTime`)
        hasher.combine(`tag`)
        hasher.combine(`readCrc`)
        hasher.combine(`reachCrc`)
        hasher.combine(`lastMsg`)
        hasher.combine(`enabledSilent`)
        hasher.combine(`lastMsgStatus`)
    }
}


public struct FfiConverterTypeChatSession: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChatSession {
        return try ChatSession(
            `did`: FfiConverterUInt64.read(from: &buf), 
            `sessionType`: FfiConverterUInt8.read(from: &buf), 
            `lastTime`: FfiConverterUInt64.read(from: &buf), 
            `tag`: FfiConverterString.read(from: &buf), 
            `readCrc`: FfiConverterUInt64.read(from: &buf), 
            `reachCrc`: FfiConverterSequenceUInt64.read(from: &buf), 
            `lastMsg`: FfiConverterString.read(from: &buf), 
            `enabledSilent`: FfiConverterBool.read(from: &buf), 
            `lastMsgStatus`: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: ChatSession, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`did`, into: &buf)
        FfiConverterUInt8.write(value.`sessionType`, into: &buf)
        FfiConverterUInt64.write(value.`lastTime`, into: &buf)
        FfiConverterString.write(value.`tag`, into: &buf)
        FfiConverterUInt64.write(value.`readCrc`, into: &buf)
        FfiConverterSequenceUInt64.write(value.`reachCrc`, into: &buf)
        FfiConverterString.write(value.`lastMsg`, into: &buf)
        FfiConverterBool.write(value.`enabledSilent`, into: &buf)
        FfiConverterUInt8.write(value.`lastMsgStatus`, into: &buf)
    }
}


public func FfiConverterTypeChatSession_lift(_ buf: RustBuffer) throws -> ChatSession {
    return try FfiConverterTypeChatSession.lift(buf)
}

public func FfiConverterTypeChatSession_lower(_ value: ChatSession) -> RustBuffer {
    return FfiConverterTypeChatSession.lower(value)
}


public struct ContactsGroupView {
    public var `did`: UInt64
    public var `tag`: String
    public var `cType`: UInt8
    public var `count`: UInt64
    public var `isManager`: Bool

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`did`: UInt64, `tag`: String, `cType`: UInt8, `count`: UInt64, `isManager`: Bool) {
        self.`did` = `did`
        self.`tag` = `tag`
        self.`cType` = `cType`
        self.`count` = `count`
        self.`isManager` = `isManager`
    }
}


extension ContactsGroupView: Equatable, Hashable {
    public static func ==(lhs: ContactsGroupView, rhs: ContactsGroupView) -> Bool {
        if lhs.`did` != rhs.`did` {
            return false
        }
        if lhs.`tag` != rhs.`tag` {
            return false
        }
        if lhs.`cType` != rhs.`cType` {
            return false
        }
        if lhs.`count` != rhs.`count` {
            return false
        }
        if lhs.`isManager` != rhs.`isManager` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`did`)
        hasher.combine(`tag`)
        hasher.combine(`cType`)
        hasher.combine(`count`)
        hasher.combine(`isManager`)
    }
}


public struct FfiConverterTypeContactsGroupView: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactsGroupView {
        return try ContactsGroupView(
            `did`: FfiConverterUInt64.read(from: &buf), 
            `tag`: FfiConverterString.read(from: &buf), 
            `cType`: FfiConverterUInt8.read(from: &buf), 
            `count`: FfiConverterUInt64.read(from: &buf), 
            `isManager`: FfiConverterBool.read(from: &buf)
        )
    }

    public static func write(_ value: ContactsGroupView, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`did`, into: &buf)
        FfiConverterString.write(value.`tag`, into: &buf)
        FfiConverterUInt8.write(value.`cType`, into: &buf)
        FfiConverterUInt64.write(value.`count`, into: &buf)
        FfiConverterBool.write(value.`isManager`, into: &buf)
    }
}


public func FfiConverterTypeContactsGroupView_lift(_ buf: RustBuffer) throws -> ContactsGroupView {
    return try FfiConverterTypeContactsGroupView.lift(buf)
}

public func FfiConverterTypeContactsGroupView_lower(_ value: ContactsGroupView) -> RustBuffer {
    return FfiConverterTypeContactsGroupView.lower(value)
}


public struct ContactsView {
    public var `did`: UInt64
    public var `tag`: String
    public var `cType`: UInt8

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`did`: UInt64, `tag`: String, `cType`: UInt8) {
        self.`did` = `did`
        self.`tag` = `tag`
        self.`cType` = `cType`
    }
}


extension ContactsView: Equatable, Hashable {
    public static func ==(lhs: ContactsView, rhs: ContactsView) -> Bool {
        if lhs.`did` != rhs.`did` {
            return false
        }
        if lhs.`tag` != rhs.`tag` {
            return false
        }
        if lhs.`cType` != rhs.`cType` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`did`)
        hasher.combine(`tag`)
        hasher.combine(`cType`)
    }
}


public struct FfiConverterTypeContactsView: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactsView {
        return try ContactsView(
            `did`: FfiConverterUInt64.read(from: &buf), 
            `tag`: FfiConverterString.read(from: &buf), 
            `cType`: FfiConverterUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: ContactsView, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`did`, into: &buf)
        FfiConverterString.write(value.`tag`, into: &buf)
        FfiConverterUInt8.write(value.`cType`, into: &buf)
    }
}


public func FfiConverterTypeContactsView_lift(_ buf: RustBuffer) throws -> ContactsView {
    return try FfiConverterTypeContactsView.lift(buf)
}

public func FfiConverterTypeContactsView_lower(_ value: ContactsView) -> RustBuffer {
    return FfiConverterTypeContactsView.lower(value)
}


public struct EventMeta {
    public var `fromId`: UInt64
    public var `toId`: UInt64
    public var `sessionType`: UInt8
    public var `fromTag`: String
    public var `toTag`: String
    public var `eventTime`: UInt64
    public var `status`: UInt32
    public var `msg`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`fromId`: UInt64, `toId`: UInt64, `sessionType`: UInt8, `fromTag`: String, `toTag`: String, `eventTime`: UInt64, `status`: UInt32, `msg`: [UInt8]) {
        self.`fromId` = `fromId`
        self.`toId` = `toId`
        self.`sessionType` = `sessionType`
        self.`fromTag` = `fromTag`
        self.`toTag` = `toTag`
        self.`eventTime` = `eventTime`
        self.`status` = `status`
        self.`msg` = `msg`
    }
}


extension EventMeta: Equatable, Hashable {
    public static func ==(lhs: EventMeta, rhs: EventMeta) -> Bool {
        if lhs.`fromId` != rhs.`fromId` {
            return false
        }
        if lhs.`toId` != rhs.`toId` {
            return false
        }
        if lhs.`sessionType` != rhs.`sessionType` {
            return false
        }
        if lhs.`fromTag` != rhs.`fromTag` {
            return false
        }
        if lhs.`toTag` != rhs.`toTag` {
            return false
        }
        if lhs.`eventTime` != rhs.`eventTime` {
            return false
        }
        if lhs.`status` != rhs.`status` {
            return false
        }
        if lhs.`msg` != rhs.`msg` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`fromId`)
        hasher.combine(`toId`)
        hasher.combine(`sessionType`)
        hasher.combine(`fromTag`)
        hasher.combine(`toTag`)
        hasher.combine(`eventTime`)
        hasher.combine(`status`)
        hasher.combine(`msg`)
    }
}


public struct FfiConverterTypeEventMeta: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> EventMeta {
        return try EventMeta(
            `fromId`: FfiConverterUInt64.read(from: &buf), 
            `toId`: FfiConverterUInt64.read(from: &buf), 
            `sessionType`: FfiConverterUInt8.read(from: &buf), 
            `fromTag`: FfiConverterString.read(from: &buf), 
            `toTag`: FfiConverterString.read(from: &buf), 
            `eventTime`: FfiConverterUInt64.read(from: &buf), 
            `status`: FfiConverterUInt32.read(from: &buf), 
            `msg`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: EventMeta, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`fromId`, into: &buf)
        FfiConverterUInt64.write(value.`toId`, into: &buf)
        FfiConverterUInt8.write(value.`sessionType`, into: &buf)
        FfiConverterString.write(value.`fromTag`, into: &buf)
        FfiConverterString.write(value.`toTag`, into: &buf)
        FfiConverterUInt64.write(value.`eventTime`, into: &buf)
        FfiConverterUInt32.write(value.`status`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`msg`, into: &buf)
    }
}


public func FfiConverterTypeEventMeta_lift(_ buf: RustBuffer) throws -> EventMeta {
    return try FfiConverterTypeEventMeta.lift(buf)
}

public func FfiConverterTypeEventMeta_lower(_ value: EventMeta) -> RustBuffer {
    return FfiConverterTypeEventMeta.lower(value)
}


public struct GroupMemberNickname {
    public var `uId`: UInt64
    public var `nickname`: String

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`uId`: UInt64, `nickname`: String) {
        self.`uId` = `uId`
        self.`nickname` = `nickname`
    }
}


extension GroupMemberNickname: Equatable, Hashable {
    public static func ==(lhs: GroupMemberNickname, rhs: GroupMemberNickname) -> Bool {
        if lhs.`uId` != rhs.`uId` {
            return false
        }
        if lhs.`nickname` != rhs.`nickname` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`uId`)
        hasher.combine(`nickname`)
    }
}


public struct FfiConverterTypeGroupMemberNickname: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> GroupMemberNickname {
        return try GroupMemberNickname(
            `uId`: FfiConverterUInt64.read(from: &buf), 
            `nickname`: FfiConverterString.read(from: &buf)
        )
    }

    public static func write(_ value: GroupMemberNickname, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`uId`, into: &buf)
        FfiConverterString.write(value.`nickname`, into: &buf)
    }
}


public func FfiConverterTypeGroupMemberNickname_lift(_ buf: RustBuffer) throws -> GroupMemberNickname {
    return try FfiConverterTypeGroupMemberNickname.lift(buf)
}

public func FfiConverterTypeGroupMemberNickname_lower(_ value: GroupMemberNickname) -> RustBuffer {
    return FfiConverterTypeGroupMemberNickname.lower(value)
}


public struct OfferView {
    public var `did`: UInt64
    public var `bsDid`: String
    public var `offerCrc`: UInt64
    public var `tag`: String
    public var `status`: OfferStatus
    public var `role`: OfferRole
    public var `eventTime`: UInt64

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`did`: UInt64, `bsDid`: String, `offerCrc`: UInt64, `tag`: String, `status`: OfferStatus, `role`: OfferRole, `eventTime`: UInt64) {
        self.`did` = `did`
        self.`bsDid` = `bsDid`
        self.`offerCrc` = `offerCrc`
        self.`tag` = `tag`
        self.`status` = `status`
        self.`role` = `role`
        self.`eventTime` = `eventTime`
    }
}


extension OfferView: Equatable, Hashable {
    public static func ==(lhs: OfferView, rhs: OfferView) -> Bool {
        if lhs.`did` != rhs.`did` {
            return false
        }
        if lhs.`bsDid` != rhs.`bsDid` {
            return false
        }
        if lhs.`offerCrc` != rhs.`offerCrc` {
            return false
        }
        if lhs.`tag` != rhs.`tag` {
            return false
        }
        if lhs.`status` != rhs.`status` {
            return false
        }
        if lhs.`role` != rhs.`role` {
            return false
        }
        if lhs.`eventTime` != rhs.`eventTime` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`did`)
        hasher.combine(`bsDid`)
        hasher.combine(`offerCrc`)
        hasher.combine(`tag`)
        hasher.combine(`status`)
        hasher.combine(`role`)
        hasher.combine(`eventTime`)
    }
}


public struct FfiConverterTypeOfferView: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OfferView {
        return try OfferView(
            `did`: FfiConverterUInt64.read(from: &buf), 
            `bsDid`: FfiConverterString.read(from: &buf), 
            `offerCrc`: FfiConverterUInt64.read(from: &buf), 
            `tag`: FfiConverterString.read(from: &buf), 
            `status`: FfiConverterTypeOfferStatus.read(from: &buf), 
            `role`: FfiConverterTypeOfferRole.read(from: &buf), 
            `eventTime`: FfiConverterUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: OfferView, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`did`, into: &buf)
        FfiConverterString.write(value.`bsDid`, into: &buf)
        FfiConverterUInt64.write(value.`offerCrc`, into: &buf)
        FfiConverterString.write(value.`tag`, into: &buf)
        FfiConverterTypeOfferStatus.write(value.`status`, into: &buf)
        FfiConverterTypeOfferRole.write(value.`role`, into: &buf)
        FfiConverterUInt64.write(value.`eventTime`, into: &buf)
    }
}


public func FfiConverterTypeOfferView_lift(_ buf: RustBuffer) throws -> OfferView {
    return try FfiConverterTypeOfferView.lift(buf)
}

public func FfiConverterTypeOfferView_lower(_ value: OfferView) -> RustBuffer {
    return FfiConverterTypeOfferView.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum OfferRole {
    
    case `applicant`
    case `acceptor`
}

public struct FfiConverterTypeOfferRole: FfiConverterRustBuffer {
    typealias SwiftType = OfferRole

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OfferRole {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`applicant`
        
        case 2: return .`acceptor`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: OfferRole, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`applicant`:
            writeInt(&buf, Int32(1))
        
        
        case .`acceptor`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeOfferRole_lift(_ buf: RustBuffer) throws -> OfferRole {
    return try FfiConverterTypeOfferRole.lift(buf)
}

public func FfiConverterTypeOfferRole_lower(_ value: OfferRole) -> RustBuffer {
    return FfiConverterTypeOfferRole.lower(value)
}


extension OfferRole: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum OfferStatus {
    
    case `offer`
    case `answer`
    case `reject`
}

public struct FfiConverterTypeOfferStatus: FfiConverterRustBuffer {
    typealias SwiftType = OfferStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> OfferStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`offer`
        
        case 2: return .`answer`
        
        case 3: return .`reject`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: OfferStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`offer`:
            writeInt(&buf, Int32(1))
        
        
        case .`answer`:
            writeInt(&buf, Int32(2))
        
        
        case .`reject`:
            writeInt(&buf, Int32(3))
        
        }
    }
}


public func FfiConverterTypeOfferStatus_lift(_ buf: RustBuffer) throws -> OfferStatus {
    return try FfiConverterTypeOfferStatus.lift(buf)
}

public func FfiConverterTypeOfferStatus_lower(_ value: OfferStatus) -> RustBuffer {
    return FfiConverterTypeOfferStatus.lower(value)
}


extension OfferStatus: Equatable, Hashable {}



public enum ClientError {

    
    
    // Simple error enums only carry a message
    case CodeParser(message: String)
    
    // Simple error enums only carry a message
    case SendFailed(message: String)
    
    // Simple error enums only carry a message
    case StartFailed(message: String)
    
    // Simple error enums only carry a message
    case SearchError(message: String)
    
    // Simple error enums only carry a message
    case SledError(message: String)
    
    // Simple error enums only carry a message
    case ParseIntError(message: String)
    
    // Simple error enums only carry a message
    case ParseFloatError(message: String)
    
    // Simple error enums only carry a message
    case FromUtf8Error(message: String)
    
    // Simple error enums only carry a message
    case TantivyError(message: String)
    
    // Simple error enums only carry a message
    case SerdeCborError(message: String)
    
    // Simple error enums only carry a message
    case IoError(message: String)
    
    // Simple error enums only carry a message
    case AnyhowError(message: String)
    
    // Simple error enums only carry a message
    case MultibaseError(message: String)
    
    // Simple error enums only carry a message
    case MultihashError(message: String)
    
    // Simple error enums only carry a message
    case Bs58DecodeError(message: String)
    
    // Simple error enums only carry a message
    case DecodingError(message: String)
    
    // Simple error enums only carry a message
    case SerdeJsonError(message: String)
    
    // Simple error enums only carry a message
    case CustomError(message: String)
    
}

public struct FfiConverterTypeClientError: FfiConverterRustBuffer {
    typealias SwiftType = ClientError

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ClientError {
        let variant: Int32 = try readInt(&buf)
        switch variant {

        

        
        case 1: return .CodeParser(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 2: return .SendFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 3: return .StartFailed(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 4: return .SearchError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .SledError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .ParseIntError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 7: return .ParseFloatError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 8: return .FromUtf8Error(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 9: return .TantivyError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 10: return .SerdeCborError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 11: return .IoError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 12: return .AnyhowError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 13: return .MultibaseError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 14: return .MultihashError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 15: return .Bs58DecodeError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 16: return .DecodingError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 17: return .SerdeJsonError(
            message: try FfiConverterString.read(from: &buf)
        )
        
        case 18: return .CustomError(
            message: try FfiConverterString.read(from: &buf)
        )
        

        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ClientError, into buf: inout [UInt8]) {
        switch value {

        

        
        case let .CodeParser(message):
            writeInt(&buf, Int32(1))
            FfiConverterString.write(message, into: &buf)
        case let .SendFailed(message):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(message, into: &buf)
        case let .StartFailed(message):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(message, into: &buf)
        case let .SearchError(message):
            writeInt(&buf, Int32(4))
            FfiConverterString.write(message, into: &buf)
        case let .SledError(message):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(message, into: &buf)
        case let .ParseIntError(message):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(message, into: &buf)
        case let .ParseFloatError(message):
            writeInt(&buf, Int32(7))
            FfiConverterString.write(message, into: &buf)
        case let .FromUtf8Error(message):
            writeInt(&buf, Int32(8))
            FfiConverterString.write(message, into: &buf)
        case let .TantivyError(message):
            writeInt(&buf, Int32(9))
            FfiConverterString.write(message, into: &buf)
        case let .SerdeCborError(message):
            writeInt(&buf, Int32(10))
            FfiConverterString.write(message, into: &buf)
        case let .IoError(message):
            writeInt(&buf, Int32(11))
            FfiConverterString.write(message, into: &buf)
        case let .AnyhowError(message):
            writeInt(&buf, Int32(12))
            FfiConverterString.write(message, into: &buf)
        case let .MultibaseError(message):
            writeInt(&buf, Int32(13))
            FfiConverterString.write(message, into: &buf)
        case let .MultihashError(message):
            writeInt(&buf, Int32(14))
            FfiConverterString.write(message, into: &buf)
        case let .Bs58DecodeError(message):
            writeInt(&buf, Int32(15))
            FfiConverterString.write(message, into: &buf)
        case let .DecodingError(message):
            writeInt(&buf, Int32(16))
            FfiConverterString.write(message, into: &buf)
        case let .SerdeJsonError(message):
            writeInt(&buf, Int32(17))
            FfiConverterString.write(message, into: &buf)
        case let .CustomError(message):
            writeInt(&buf, Int32(18))
            FfiConverterString.write(message, into: &buf)

        
        }
    }
}


extension ClientError: Equatable, Hashable {}

extension ClientError: Error { }

fileprivate extension NSLock {
    func withLock<T>(f: () throws -> T) rethrows -> T {
        self.lock()
        defer { self.unlock() }
        return try f()
    }
}

fileprivate typealias UniFFICallbackHandle = UInt64
fileprivate class UniFFICallbackHandleMap<T> {
    private var leftMap: [UniFFICallbackHandle: T] = [:]
    private var counter: [UniFFICallbackHandle: UInt64] = [:]
    private var rightMap: [ObjectIdentifier: UniFFICallbackHandle] = [:]

    private let lock = NSLock()
    private var currentHandle: UniFFICallbackHandle = 0
    private let stride: UniFFICallbackHandle = 1

    func insert(obj: T) -> UniFFICallbackHandle {
        lock.withLock {
            let id = ObjectIdentifier(obj as AnyObject)
            let handle = rightMap[id] ?? {
                currentHandle += stride
                let handle = currentHandle
                leftMap[handle] = obj
                rightMap[id] = handle
                return handle
            }()
            counter[handle] = (counter[handle] ?? 0) + 1
            return handle
        }
    }

    func get(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            leftMap[handle]
        }
    }

    func delete(handle: UniFFICallbackHandle) {
        remove(handle: handle)
    }

    @discardableResult
    func remove(handle: UniFFICallbackHandle) -> T? {
        lock.withLock {
            defer { counter[handle] = (counter[handle] ?? 1) - 1 }
            guard counter[handle] == 1 else { return leftMap[handle] }
            let obj = leftMap.removeValue(forKey: handle)
            if let obj = obj {
                rightMap.removeValue(forKey: ObjectIdentifier(obj as AnyObject))
            }
            return obj
        }
    }
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
private let IDX_CALLBACK_FREE: Int32 = 0

// Declaration and FfiConverters for Callback Callback Interface

public protocol Callback : AnyObject {
    func `onMessage`(`crc`: UInt64, `from`: UInt64, `to`: UInt64, `eventTime`: UInt64, `msg`: [UInt8]) 
    
}

// The ForeignCallback that is passed to Rust.
fileprivate let foreignCallbackCallbackInterfaceCallback : ForeignCallback =
    { (handle: UniFFICallbackHandle, method: Int32, args: RustBuffer, out_buf: UnsafeMutablePointer<RustBuffer>) -> Int32 in
        func `invokeOnMessage`(_ swiftCallbackInterface: Callback, _ args: RustBuffer) throws -> RustBuffer {
        defer { args.deallocate() }

            var reader = createReader(data: Data(rustBuffer: args))
            swiftCallbackInterface.`onMessage`(
                    `crc`:  try FfiConverterUInt64.read(from: &reader), 
                    `from`:  try FfiConverterUInt64.read(from: &reader), 
                    `to`:  try FfiConverterUInt64.read(from: &reader), 
                    `eventTime`:  try FfiConverterUInt64.read(from: &reader), 
                    `msg`:  try FfiConverterSequenceUInt8.read(from: &reader)
                    )
            return RustBuffer()
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351

        }
        

        let cb: Callback
        do {
            cb = try FfiConverterCallbackInterfaceCallback.lift(handle)
        } catch {
            out_buf.pointee = FfiConverterString.lower("Callback: Invalid handle")
            return -1
        }

        switch method {
            case IDX_CALLBACK_FREE:
                FfiConverterCallbackInterfaceCallback.drop(handle: handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return 0
            case 1:
                do {
                    out_buf.pointee = try `invokeOnMessage`(cb, args)
                    // Value written to out buffer.
                    // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                    return 1
                } catch let error {
                    out_buf.pointee = FfiConverterString.lower(String(describing: error))
                    return -1
                }
            
            // This should never happen, because an out of bounds method index won't
            // ever be used. Once we can catch errors, we should return an InternalError.
            // https://github.com/mozilla/uniffi-rs/issues/351
            default:
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                return -1
        }
    }

// FfiConverter protocol for callback interfaces
fileprivate struct FfiConverterCallbackInterfaceCallback {
    // Initialize our callback method with the scaffolding code
    private static var callbackInitialized = false
    private static func initCallback() {
        try! rustCall { (err: UnsafeMutablePointer<RustCallStatus>) in
                ffi_LuffaSDK_d7c_Callback_init_callback(foreignCallbackCallbackInterfaceCallback, err)
        }
    }
    private static func ensureCallbackinitialized() {
        if !callbackInitialized {
            initCallback()
            callbackInitialized = true
        }
    }

    static func drop(handle: UniFFICallbackHandle) {
        handleMap.remove(handle: handle)
    }

    private static var handleMap = UniFFICallbackHandleMap<Callback>()
}

extension FfiConverterCallbackInterfaceCallback : FfiConverter {
    typealias SwiftType = Callback
    // We can use Handle as the FfiType because it's a typealias to UInt64
    typealias FfiType = UniFFICallbackHandle

    public static func lift(_ handle: UniFFICallbackHandle) throws -> SwiftType {
        ensureCallbackinitialized();
        guard let callback = handleMap.get(handle: handle) else {
            throw UniffiInternalError.unexpectedStaleHandle
        }
        return callback
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        ensureCallbackinitialized();
        let handle: UniFFICallbackHandle = try readInt(&buf)
        return try lift(handle)
    }

    public static func lower(_ v: SwiftType) -> UniFFICallbackHandle {
        ensureCallbackinitialized();
        return handleMap.insert(obj: v)
    }

    public static func write(_ v: SwiftType, into buf: inout [UInt8]) {
        ensureCallbackinitialized();
        writeInt(&buf, lower(v))
    }
}

fileprivate struct FfiConverterOptionUInt64: FfiConverterRustBuffer {
    typealias SwiftType = UInt64?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterUInt64.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterUInt64.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeEventMeta: FfiConverterRustBuffer {
    typealias SwiftType = EventMeta?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeEventMeta.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeEventMeta.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceUInt64: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64]

    public static func write(_ value: [UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt64.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceString: FfiConverterRustBuffer {
    typealias SwiftType = [String]

    public static func write(_ value: [String], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterString.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [String] {
        let len: Int32 = try readInt(&buf)
        var seq = [String]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterString.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeChatSession: FfiConverterRustBuffer {
    typealias SwiftType = [ChatSession]

    public static func write(_ value: [ChatSession], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeChatSession.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ChatSession] {
        let len: Int32 = try readInt(&buf)
        var seq = [ChatSession]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeChatSession.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeContactsGroupView: FfiConverterRustBuffer {
    typealias SwiftType = [ContactsGroupView]

    public static func write(_ value: [ContactsGroupView], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContactsGroupView.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContactsGroupView] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContactsGroupView]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContactsGroupView.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeContactsView: FfiConverterRustBuffer {
    typealias SwiftType = [ContactsView]

    public static func write(_ value: [ContactsView], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContactsView.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [ContactsView] {
        let len: Int32 = try readInt(&buf)
        var seq = [ContactsView]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContactsView.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeGroupMemberNickname: FfiConverterRustBuffer {
    typealias SwiftType = [GroupMemberNickname]

    public static func write(_ value: [GroupMemberNickname], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeGroupMemberNickname.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [GroupMemberNickname] {
        let len: Int32 = try readInt(&buf)
        var seq = [GroupMemberNickname]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeGroupMemberNickname.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeOfferView: FfiConverterRustBuffer {
    typealias SwiftType = [OfferView]

    public static func write(_ value: [OfferView], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeOfferView.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [OfferView] {
        let len: Int32 = try readInt(&buf)
        var seq = [OfferView]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeOfferView.read(from: &buf))
        }
        return seq
    }
}

public func `publicKeyToId`(`publicKey`: [UInt8])  -> UInt64 {
    return try! FfiConverterUInt64.lift(
        try!
    
    rustCall() {
    
    LuffaSDK_d7c_public_key_to_id(
        FfiConverterSequenceUInt8.lower(`publicKey`), $0)
}
    )
}



public func `bs58Decode`(`data`: String) throws -> UInt64 {
    return try FfiConverterUInt64.lift(
        try
    
    rustCallWithError(FfiConverterTypeClientError.self) {
    
    LuffaSDK_d7c_bs58_decode(
        FfiConverterString.lower(`data`), $0)
}
    )
}



public func `bs58Encode`(`data`: UInt64) throws -> String {
    return try FfiConverterString.lift(
        try
    
    rustCallWithError(FfiConverterTypeClientError.self) {
    
    LuffaSDK_d7c_bs58_encode(
        FfiConverterUInt64.lower(`data`), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LuffaSdkLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}