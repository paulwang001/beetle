// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.LuffaSDK;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.locks.ReentrantLock
import kotlin.concurrent.withLock

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_LuffaSDK_a4a0_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_LuffaSDK_a4a0_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_LuffaSDK"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "LuffaSDK")
            .also { lib: _UniFFILib ->
                FfiConverterTypeCallback.register(lib)
                }
            
        }
    }

    fun ffi_LuffaSDK_a4a0_Client_object_free(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_new(
    _uniffi_out_err: RustCallStatus
    ): Pointer

    fun LuffaSDK_a4a0_Client_get_current_user(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_share(`ptr`: Pointer,`domainName`: RustBuffer.ByValue,`linkType`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_show_code(`ptr`: Pointer,`domainName`: RustBuffer.ByValue,`linkType`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_contacts_offer(`ptr`: Pointer,`code`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_gen_offer_code(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_contacts_group_create(`ptr`: Pointer,`invitee`: RustBuffer.ByValue,`tag`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_contacts_group_invite_member(`ptr`: Pointer,`gId`: Long,`invitee`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun LuffaSDK_a4a0_Client_contacts_group_members(`ptr`: Pointer,`gId`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_contacts_anwser(`ptr`: Pointer,`did`: Long,`crc`: Long,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_contacts_reject(`ptr`: Pointer,`did`: Long,`crc`: Long,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_send_msg(`ptr`: Pointer,`to`: Long,`msg`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_get_local_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_get_peer_id(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_get_did(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_relay_list(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_keys(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_connect(`ptr`: Pointer,`peerId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun LuffaSDK_a4a0_Client_disconnect(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun LuffaSDK_a4a0_Client_init(`ptr`: Pointer,`cfgPath`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_init_with_env_name(`ptr`: Pointer,`name`: RustBuffer.ByValue,`timeoutMs`: Long,`alwaysFetchFile`: Byte,`fetchFailedRet`: Byte,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_start(`ptr`: Pointer,`key`: RustBuffer.ByValue,`tag`: RustBuffer.ByValue,`cb`: Long,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_Client_stop(`ptr`: Pointer,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_save_session(`ptr`: Pointer,`did`: Long,`tag`: RustBuffer.ByValue,`read`: RustBuffer.ByValue,`reach`: RustBuffer.ByValue,`msg`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_session_list(`ptr`: Pointer,`top`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_session_page(`ptr`: Pointer,`page`: Int,`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_contacts_search(`ptr`: Pointer,`cType`: Byte,`pattern`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_contacts_list(`ptr`: Pointer,`cType`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_search(`ptr`: Pointer,`query`: RustBuffer.ByValue,`offet`: Int,`limit`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_recent_messages(`ptr`: Pointer,`did`: Long,`offset`: Int,`limit`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_recent_offser(`ptr`: Pointer,`top`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_find_contacts_tag(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_meta_msg(`ptr`: Pointer,`data`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_read_msg_with_meta(`ptr`: Pointer,`did`: Long,`crc`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_read_msg_meta_without_chat_session(`ptr`: Pointer,`did`: Long,`crc`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_last_chat_msg_with_meta(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_last_user_msg_with_meta(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_gen_key(`ptr`: Pointer,`password`: RustBuffer.ByValue,`store`: Byte,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_import_key(`ptr`: Pointer,`phrase`: RustBuffer.ByValue,`password`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_save_key(`ptr`: Pointer,`name`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun LuffaSDK_a4a0_Client_remove_key(`ptr`: Pointer,`name`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Byte

    fun LuffaSDK_a4a0_Client_read_key_phrase(`ptr`: Pointer,`name`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_generate_avatar(`ptr`: Pointer,`peerId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_generate_nickname(`ptr`: Pointer,`peerId`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaSDK_a4a0_Client_remove_local_msg(`ptr`: Pointer,`did`: Long,`crc`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_enable_silent(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_Client_disable_silent(`ptr`: Pointer,`did`: Long,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_LuffaSDK_a4a0_Callback_init_callback(`callbackStub`: ForeignCallback,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun LuffaSDK_a4a0_public_key_to_id(`publicKey`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_bs58_decode(`data`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Long

    fun LuffaSDK_a4a0_bs58_encode(`data`: Long,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaSDK_a4a0_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaSDK_a4a0_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaSDK_a4a0_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_LuffaSDK_a4a0_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean: FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1

    override fun write(value: Boolean, buf: ByteBuffer) {
        buf.put(lower(value))
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}


// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement always matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}

public interface ClientInterface {
    
    @Throws(ClientException::class)
    fun `getCurrentUser`(): String?
    
    @Throws(ClientException::class)
    fun `share`(`domainName`: String, `linkType`: String): String?
    
    @Throws(ClientException::class)
    fun `showCode`(`domainName`: String, `linkType`: String): String?
    
    @Throws(ClientException::class)
    fun `contactsOffer`(`code`: String): ULong
    
    @Throws(ClientException::class)
    fun `genOfferCode`(`did`: ULong): String
    
    @Throws(ClientException::class)
    fun `contactsGroupCreate`(`invitee`: List<ULong>, `tag`: String?): ULong
    
    @Throws(ClientException::class)
    fun `contactsGroupInviteMember`(`gId`: ULong, `invitee`: List<ULong>): Boolean
    
    @Throws(ClientException::class)
    fun `contactsGroupMembers`(`gId`: ULong): List<ULong>
    
    @Throws(ClientException::class)
    fun `contactsAnwser`(`did`: ULong, `crc`: ULong): ULong
    
    @Throws(ClientException::class)
    fun `contactsReject`(`did`: ULong, `crc`: ULong): ULong
    
    @Throws(ClientException::class)
    fun `sendMsg`(`to`: ULong, `msg`: List<UByte>): ULong
    
    @Throws(ClientException::class)
    fun `getLocalId`(): ULong?
    
    @Throws(ClientException::class)
    fun `getPeerId`(): String?
    
    @Throws(ClientException::class)
    fun `getDid`(): String?
    
    @Throws(ClientException::class)
    fun `relayList`(): List<String>
    
    @Throws(ClientException::class)
    fun `keys`(): List<String>
    
    @Throws(ClientException::class)
    fun `connect`(`peerId`: String): Boolean
    
    @Throws(ClientException::class)
    fun `disconnect`(): Boolean
    
    @Throws(ClientException::class)
    fun `init`(`cfgPath`: String?)
    
    @Throws(ClientException::class)
    fun `initWithEnvName`(`name`: String, `timeoutMs`: ULong, `alwaysFetchFile`: Boolean, `fetchFailedRet`: Boolean)
    
    @Throws(ClientException::class)
    fun `start`(`key`: String?, `tag`: String?, `cb`: Callback): ULong
    
    @Throws(ClientException::class)
    fun `stop`()
    
    @Throws(ClientException::class)
    fun `saveSession`(`did`: ULong, `tag`: String, `read`: ULong?, `reach`: ULong?, `msg`: String?)
    
    @Throws(ClientException::class)
    fun `sessionList`(`top`: UInt): List<ChatSession>
    
    @Throws(ClientException::class)
    fun `sessionPage`(`page`: UInt, `size`: UInt): List<ChatSession>
    
    @Throws(ClientException::class)
    fun `contactsSearch`(`cType`: UByte, `pattern`: String): List<ContactsView>
    
    @Throws(ClientException::class)
    fun `contactsList`(`cType`: UByte): List<ContactsView>
    
    @Throws(ClientException::class)
    fun `search`(`query`: String, `offet`: UInt, `limit`: UInt): List<String>
    
    @Throws(ClientException::class)
    fun `recentMessages`(`did`: ULong, `offset`: UInt, `limit`: UInt): List<ULong>
    
    @Throws(ClientException::class)
    fun `recentOffser`(`top`: UInt): List<OfferView>
    
    @Throws(ClientException::class)
    fun `findContactsTag`(`did`: ULong): String?
    
    @Throws(ClientException::class)
    fun `metaMsg`(`data`: List<UByte>): EventMeta
    
    @Throws(ClientException::class)
    fun `readMsgWithMeta`(`did`: ULong, `crc`: ULong): EventMeta?
    
    @Throws(ClientException::class)
    fun `readMsgMetaWithoutChatSession`(`did`: ULong, `crc`: ULong): EventMeta?
    
    @Throws(ClientException::class)
    fun `lastChatMsgWithMeta`(`did`: ULong): EventMeta?
    
    @Throws(ClientException::class)
    fun `lastUserMsgWithMeta`(`did`: ULong): EventMeta?
    
    @Throws(ClientException::class)
    fun `genKey`(`password`: String, `store`: Boolean): String?
    
    @Throws(ClientException::class)
    fun `importKey`(`phrase`: String, `password`: String): String?
    
    @Throws(ClientException::class)
    fun `saveKey`(`name`: String): Boolean
    
    @Throws(ClientException::class)
    fun `removeKey`(`name`: String): Boolean
    
    @Throws(ClientException::class)
    fun `readKeyPhrase`(`name`: String): String?
    
    @Throws(ClientException::class)
    fun `generateAvatar`(`peerId`: String): String
    
    @Throws(ClientException::class)
    fun `generateNickname`(`peerId`: String): String
    
    @Throws(ClientException::class)
    fun `removeLocalMsg`(`did`: ULong, `crc`: ULong)
    
    @Throws(ClientException::class)
    fun `enableSilent`(`did`: ULong)
    
    @Throws(ClientException::class)
    fun `disableSilent`(`did`: ULong)
    
}

class Client(
    pointer: Pointer
) : FFIObject(pointer), ClientInterface {
    constructor() :
        this(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_new( _status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_LuffaSDK_a4a0_Client_object_free(this.pointer, status)
        }
    }

    
    @Throws(ClientException::class)override fun `getCurrentUser`(): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_get_current_user(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `share`(`domainName`: String, `linkType`: String): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_share(it, FfiConverterString.lower(`domainName`), FfiConverterString.lower(`linkType`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `showCode`(`domainName`: String, `linkType`: String): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_show_code(it, FfiConverterString.lower(`domainName`), FfiConverterString.lower(`linkType`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsOffer`(`code`: String): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_offer(it, FfiConverterString.lower(`code`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `genOfferCode`(`did`: ULong): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_gen_offer_code(it, FfiConverterULong.lower(`did`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsGroupCreate`(`invitee`: List<ULong>, `tag`: String?): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_group_create(it, FfiConverterSequenceULong.lower(`invitee`), FfiConverterOptionalString.lower(`tag`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsGroupInviteMember`(`gId`: ULong, `invitee`: List<ULong>): Boolean =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_group_invite_member(it, FfiConverterULong.lower(`gId`), FfiConverterSequenceULong.lower(`invitee`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsGroupMembers`(`gId`: ULong): List<ULong> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_group_members(it, FfiConverterULong.lower(`gId`),  _status)
}
        }.let {
            FfiConverterSequenceULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsAnwser`(`did`: ULong, `crc`: ULong): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_anwser(it, FfiConverterULong.lower(`did`), FfiConverterULong.lower(`crc`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsReject`(`did`: ULong, `crc`: ULong): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_reject(it, FfiConverterULong.lower(`did`), FfiConverterULong.lower(`crc`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `sendMsg`(`to`: ULong, `msg`: List<UByte>): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_send_msg(it, FfiConverterULong.lower(`to`), FfiConverterSequenceUByte.lower(`msg`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `getLocalId`(): ULong? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_get_local_id(it,  _status)
}
        }.let {
            FfiConverterOptionalULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `getPeerId`(): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_get_peer_id(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `getDid`(): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_get_did(it,  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `relayList`(): List<String> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_relay_list(it,  _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `keys`(): List<String> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_keys(it,  _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `connect`(`peerId`: String): Boolean =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_connect(it, FfiConverterString.lower(`peerId`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(ClientException::class)override fun `disconnect`(): Boolean =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_disconnect(it,  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(ClientException::class)override fun `init`(`cfgPath`: String?) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_init(it, FfiConverterOptionalString.lower(`cfgPath`),  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `initWithEnvName`(`name`: String, `timeoutMs`: ULong, `alwaysFetchFile`: Boolean, `fetchFailedRet`: Boolean) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_init_with_env_name(it, FfiConverterString.lower(`name`), FfiConverterULong.lower(`timeoutMs`), FfiConverterBoolean.lower(`alwaysFetchFile`), FfiConverterBoolean.lower(`fetchFailedRet`),  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `start`(`key`: String?, `tag`: String?, `cb`: Callback): ULong =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_start(it, FfiConverterOptionalString.lower(`key`), FfiConverterOptionalString.lower(`tag`), FfiConverterTypeCallback.lower(`cb`),  _status)
}
        }.let {
            FfiConverterULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `stop`() =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_stop(it,  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `saveSession`(`did`: ULong, `tag`: String, `read`: ULong?, `reach`: ULong?, `msg`: String?) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_save_session(it, FfiConverterULong.lower(`did`), FfiConverterString.lower(`tag`), FfiConverterOptionalULong.lower(`read`), FfiConverterOptionalULong.lower(`reach`), FfiConverterOptionalString.lower(`msg`),  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `sessionList`(`top`: UInt): List<ChatSession> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_session_list(it, FfiConverterUInt.lower(`top`),  _status)
}
        }.let {
            FfiConverterSequenceTypeChatSession.lift(it)
        }
    
    @Throws(ClientException::class)override fun `sessionPage`(`page`: UInt, `size`: UInt): List<ChatSession> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_session_page(it, FfiConverterUInt.lower(`page`), FfiConverterUInt.lower(`size`),  _status)
}
        }.let {
            FfiConverterSequenceTypeChatSession.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsSearch`(`cType`: UByte, `pattern`: String): List<ContactsView> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_search(it, FfiConverterUByte.lower(`cType`), FfiConverterString.lower(`pattern`),  _status)
}
        }.let {
            FfiConverterSequenceTypeContactsView.lift(it)
        }
    
    @Throws(ClientException::class)override fun `contactsList`(`cType`: UByte): List<ContactsView> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_contacts_list(it, FfiConverterUByte.lower(`cType`),  _status)
}
        }.let {
            FfiConverterSequenceTypeContactsView.lift(it)
        }
    
    @Throws(ClientException::class)override fun `search`(`query`: String, `offet`: UInt, `limit`: UInt): List<String> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_search(it, FfiConverterString.lower(`query`), FfiConverterUInt.lower(`offet`), FfiConverterUInt.lower(`limit`),  _status)
}
        }.let {
            FfiConverterSequenceString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `recentMessages`(`did`: ULong, `offset`: UInt, `limit`: UInt): List<ULong> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_recent_messages(it, FfiConverterULong.lower(`did`), FfiConverterUInt.lower(`offset`), FfiConverterUInt.lower(`limit`),  _status)
}
        }.let {
            FfiConverterSequenceULong.lift(it)
        }
    
    @Throws(ClientException::class)override fun `recentOffser`(`top`: UInt): List<OfferView> =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_recent_offser(it, FfiConverterUInt.lower(`top`),  _status)
}
        }.let {
            FfiConverterSequenceTypeOfferView.lift(it)
        }
    
    @Throws(ClientException::class)override fun `findContactsTag`(`did`: ULong): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_find_contacts_tag(it, FfiConverterULong.lower(`did`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `metaMsg`(`data`: List<UByte>): EventMeta =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_meta_msg(it, FfiConverterSequenceUByte.lower(`data`),  _status)
}
        }.let {
            FfiConverterTypeEventMeta.lift(it)
        }
    
    @Throws(ClientException::class)override fun `readMsgWithMeta`(`did`: ULong, `crc`: ULong): EventMeta? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_read_msg_with_meta(it, FfiConverterULong.lower(`did`), FfiConverterULong.lower(`crc`),  _status)
}
        }.let {
            FfiConverterOptionalTypeEventMeta.lift(it)
        }
    
    @Throws(ClientException::class)override fun `readMsgMetaWithoutChatSession`(`did`: ULong, `crc`: ULong): EventMeta? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_read_msg_meta_without_chat_session(it, FfiConverterULong.lower(`did`), FfiConverterULong.lower(`crc`),  _status)
}
        }.let {
            FfiConverterOptionalTypeEventMeta.lift(it)
        }
    
    @Throws(ClientException::class)override fun `lastChatMsgWithMeta`(`did`: ULong): EventMeta? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_last_chat_msg_with_meta(it, FfiConverterULong.lower(`did`),  _status)
}
        }.let {
            FfiConverterOptionalTypeEventMeta.lift(it)
        }
    
    @Throws(ClientException::class)override fun `lastUserMsgWithMeta`(`did`: ULong): EventMeta? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_last_user_msg_with_meta(it, FfiConverterULong.lower(`did`),  _status)
}
        }.let {
            FfiConverterOptionalTypeEventMeta.lift(it)
        }
    
    @Throws(ClientException::class)override fun `genKey`(`password`: String, `store`: Boolean): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_gen_key(it, FfiConverterString.lower(`password`), FfiConverterBoolean.lower(`store`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `importKey`(`phrase`: String, `password`: String): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_import_key(it, FfiConverterString.lower(`phrase`), FfiConverterString.lower(`password`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `saveKey`(`name`: String): Boolean =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_save_key(it, FfiConverterString.lower(`name`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(ClientException::class)override fun `removeKey`(`name`: String): Boolean =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_remove_key(it, FfiConverterString.lower(`name`),  _status)
}
        }.let {
            FfiConverterBoolean.lift(it)
        }
    
    @Throws(ClientException::class)override fun `readKeyPhrase`(`name`: String): String? =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_read_key_phrase(it, FfiConverterString.lower(`name`),  _status)
}
        }.let {
            FfiConverterOptionalString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `generateAvatar`(`peerId`: String): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_generate_avatar(it, FfiConverterString.lower(`peerId`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `generateNickname`(`peerId`: String): String =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_generate_nickname(it, FfiConverterString.lower(`peerId`),  _status)
}
        }.let {
            FfiConverterString.lift(it)
        }
    
    @Throws(ClientException::class)override fun `removeLocalMsg`(`did`: ULong, `crc`: ULong) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_remove_local_msg(it, FfiConverterULong.lower(`did`), FfiConverterULong.lower(`crc`),  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `enableSilent`(`did`: ULong) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_enable_silent(it, FfiConverterULong.lower(`did`),  _status)
}
        }
    
    
    @Throws(ClientException::class)override fun `disableSilent`(`did`: ULong) =
        callWithPointer {
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_Client_disable_silent(it, FfiConverterULong.lower(`did`),  _status)
}
        }
    
    

    
}

public object FfiConverterTypeClient: FfiConverter<Client, Pointer> {
    override fun lower(value: Client): Pointer = value.callWithPointer { it }

    override fun lift(value: Pointer): Client {
        return Client(value)
    }

    override fun read(buf: ByteBuffer): Client {
        // The Rust code always writes pointers as 8 bytes, and will
        // fail to compile if they don't fit.
        return lift(Pointer(buf.getLong()))
    }

    override fun allocationSize(value: Client) = 8

    override fun write(value: Client, buf: ByteBuffer) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(lower(value)))
    }
}




data class ChatSession (
    var `did`: ULong, 
    var `sessionType`: UByte, 
    var `lastTime`: ULong, 
    var `tag`: String, 
    var `readCrc`: ULong, 
    var `reachCrc`: List<ULong>, 
    var `lastMsg`: String, 
    var `enabledSilent`: Boolean, 
    var `lastMsgStatus`: UByte
) {
    
}

public object FfiConverterTypeChatSession: FfiConverterRustBuffer<ChatSession> {
    override fun read(buf: ByteBuffer): ChatSession {
        return ChatSession(
            FfiConverterULong.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterUByte.read(buf),
        )
    }

    override fun allocationSize(value: ChatSession) = (
            FfiConverterULong.allocationSize(value.`did`) +
            FfiConverterUByte.allocationSize(value.`sessionType`) +
            FfiConverterULong.allocationSize(value.`lastTime`) +
            FfiConverterString.allocationSize(value.`tag`) +
            FfiConverterULong.allocationSize(value.`readCrc`) +
            FfiConverterSequenceULong.allocationSize(value.`reachCrc`) +
            FfiConverterString.allocationSize(value.`lastMsg`) +
            FfiConverterBoolean.allocationSize(value.`enabledSilent`) +
            FfiConverterUByte.allocationSize(value.`lastMsgStatus`)
    )

    override fun write(value: ChatSession, buf: ByteBuffer) {
            FfiConverterULong.write(value.`did`, buf)
            FfiConverterUByte.write(value.`sessionType`, buf)
            FfiConverterULong.write(value.`lastTime`, buf)
            FfiConverterString.write(value.`tag`, buf)
            FfiConverterULong.write(value.`readCrc`, buf)
            FfiConverterSequenceULong.write(value.`reachCrc`, buf)
            FfiConverterString.write(value.`lastMsg`, buf)
            FfiConverterBoolean.write(value.`enabledSilent`, buf)
            FfiConverterUByte.write(value.`lastMsgStatus`, buf)
    }
}




data class ContactsView (
    var `did`: ULong, 
    var `tag`: String, 
    var `cType`: UByte
) {
    
}

public object FfiConverterTypeContactsView: FfiConverterRustBuffer<ContactsView> {
    override fun read(buf: ByteBuffer): ContactsView {
        return ContactsView(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
        )
    }

    override fun allocationSize(value: ContactsView) = (
            FfiConverterULong.allocationSize(value.`did`) +
            FfiConverterString.allocationSize(value.`tag`) +
            FfiConverterUByte.allocationSize(value.`cType`)
    )

    override fun write(value: ContactsView, buf: ByteBuffer) {
            FfiConverterULong.write(value.`did`, buf)
            FfiConverterString.write(value.`tag`, buf)
            FfiConverterUByte.write(value.`cType`, buf)
    }
}




data class EventMeta (
    var `fromId`: ULong, 
    var `toId`: ULong, 
    var `fromTag`: String, 
    var `toTag`: String, 
    var `eventTime`: ULong, 
    var `status`: UInt, 
    var `msg`: List<UByte>
) {
    
}

public object FfiConverterTypeEventMeta: FfiConverterRustBuffer<EventMeta> {
    override fun read(buf: ByteBuffer): EventMeta {
        return EventMeta(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: EventMeta) = (
            FfiConverterULong.allocationSize(value.`fromId`) +
            FfiConverterULong.allocationSize(value.`toId`) +
            FfiConverterString.allocationSize(value.`fromTag`) +
            FfiConverterString.allocationSize(value.`toTag`) +
            FfiConverterULong.allocationSize(value.`eventTime`) +
            FfiConverterUInt.allocationSize(value.`status`) +
            FfiConverterSequenceUByte.allocationSize(value.`msg`)
    )

    override fun write(value: EventMeta, buf: ByteBuffer) {
            FfiConverterULong.write(value.`fromId`, buf)
            FfiConverterULong.write(value.`toId`, buf)
            FfiConverterString.write(value.`fromTag`, buf)
            FfiConverterString.write(value.`toTag`, buf)
            FfiConverterULong.write(value.`eventTime`, buf)
            FfiConverterUInt.write(value.`status`, buf)
            FfiConverterSequenceUByte.write(value.`msg`, buf)
    }
}




data class OfferView (
    var `did`: ULong, 
    var `bsDid`: String, 
    var `offerCrc`: ULong, 
    var `tag`: String, 
    var `status`: OfferStatus, 
    var `eventTime`: ULong
) {
    
}

public object FfiConverterTypeOfferView: FfiConverterRustBuffer<OfferView> {
    override fun read(buf: ByteBuffer): OfferView {
        return OfferView(
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeOfferStatus.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: OfferView) = (
            FfiConverterULong.allocationSize(value.`did`) +
            FfiConverterString.allocationSize(value.`bsDid`) +
            FfiConverterULong.allocationSize(value.`offerCrc`) +
            FfiConverterString.allocationSize(value.`tag`) +
            FfiConverterTypeOfferStatus.allocationSize(value.`status`) +
            FfiConverterULong.allocationSize(value.`eventTime`)
    )

    override fun write(value: OfferView, buf: ByteBuffer) {
            FfiConverterULong.write(value.`did`, buf)
            FfiConverterString.write(value.`bsDid`, buf)
            FfiConverterULong.write(value.`offerCrc`, buf)
            FfiConverterString.write(value.`tag`, buf)
            FfiConverterTypeOfferStatus.write(value.`status`, buf)
            FfiConverterULong.write(value.`eventTime`, buf)
    }
}




enum class OfferStatus {
    OFFER,ANSWER,REJECT;
}

public object FfiConverterTypeOfferStatus: FfiConverterRustBuffer<OfferStatus> {
    override fun read(buf: ByteBuffer) = try {
        OfferStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: OfferStatus) = 4

    override fun write(value: OfferStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}







sealed class ClientException(message: String): Exception(message) {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class CodeParser(message: String) : ClientException(message)
        class SendFailed(message: String) : ClientException(message)
        class StartFailed(message: String) : ClientException(message)
        class SearchException(message: String) : ClientException(message)
        class SledException(message: String) : ClientException(message)
        class ParseIntException(message: String) : ClientException(message)
        class ParseFloatException(message: String) : ClientException(message)
        class FromUtf8Exception(message: String) : ClientException(message)
        class TantivyException(message: String) : ClientException(message)
        class SerdeCborException(message: String) : ClientException(message)
        class IoException(message: String) : ClientException(message)
        class AnyhowException(message: String) : ClientException(message)
        class MultibaseException(message: String) : ClientException(message)
        class MultihashException(message: String) : ClientException(message)
        class Bs58DecodeException(message: String) : ClientException(message)
        class DecodingException(message: String) : ClientException(message)
        class SerdeJsonException(message: String) : ClientException(message)
        class CustomException(message: String) : ClientException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<ClientException> {
        override fun lift(error_buf: RustBuffer.ByValue): ClientException = FfiConverterTypeClientError.lift(error_buf)
    }
}

public object FfiConverterTypeClientError : FfiConverterRustBuffer<ClientException> {
    override fun read(buf: ByteBuffer): ClientException {
        
            return when(buf.getInt()) {
            1 -> ClientException.CodeParser(FfiConverterString.read(buf))
            2 -> ClientException.SendFailed(FfiConverterString.read(buf))
            3 -> ClientException.StartFailed(FfiConverterString.read(buf))
            4 -> ClientException.SearchException(FfiConverterString.read(buf))
            5 -> ClientException.SledException(FfiConverterString.read(buf))
            6 -> ClientException.ParseIntException(FfiConverterString.read(buf))
            7 -> ClientException.ParseFloatException(FfiConverterString.read(buf))
            8 -> ClientException.FromUtf8Exception(FfiConverterString.read(buf))
            9 -> ClientException.TantivyException(FfiConverterString.read(buf))
            10 -> ClientException.SerdeCborException(FfiConverterString.read(buf))
            11 -> ClientException.IoException(FfiConverterString.read(buf))
            12 -> ClientException.AnyhowException(FfiConverterString.read(buf))
            13 -> ClientException.MultibaseException(FfiConverterString.read(buf))
            14 -> ClientException.MultihashException(FfiConverterString.read(buf))
            15 -> ClientException.Bs58DecodeException(FfiConverterString.read(buf))
            16 -> ClientException.DecodingException(FfiConverterString.read(buf))
            17 -> ClientException.SerdeJsonException(FfiConverterString.read(buf))
            18 -> ClientException.CustomException(FfiConverterString.read(buf))
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
        
    }

    override fun allocationSize(value: ClientException): Int {
        return 4
    }

    override fun write(value: ClientException, buf: ByteBuffer) {
        when(value) {
            is ClientException.CodeParser -> {
                buf.putInt(1)
                Unit
            }
            is ClientException.SendFailed -> {
                buf.putInt(2)
                Unit
            }
            is ClientException.StartFailed -> {
                buf.putInt(3)
                Unit
            }
            is ClientException.SearchException -> {
                buf.putInt(4)
                Unit
            }
            is ClientException.SledException -> {
                buf.putInt(5)
                Unit
            }
            is ClientException.ParseIntException -> {
                buf.putInt(6)
                Unit
            }
            is ClientException.ParseFloatException -> {
                buf.putInt(7)
                Unit
            }
            is ClientException.FromUtf8Exception -> {
                buf.putInt(8)
                Unit
            }
            is ClientException.TantivyException -> {
                buf.putInt(9)
                Unit
            }
            is ClientException.SerdeCborException -> {
                buf.putInt(10)
                Unit
            }
            is ClientException.IoException -> {
                buf.putInt(11)
                Unit
            }
            is ClientException.AnyhowException -> {
                buf.putInt(12)
                Unit
            }
            is ClientException.MultibaseException -> {
                buf.putInt(13)
                Unit
            }
            is ClientException.MultihashException -> {
                buf.putInt(14)
                Unit
            }
            is ClientException.Bs58DecodeException -> {
                buf.putInt(15)
                Unit
            }
            is ClientException.DecodingException -> {
                buf.putInt(16)
                Unit
            }
            is ClientException.SerdeJsonException -> {
                buf.putInt(17)
                Unit
            }
            is ClientException.CustomException -> {
                buf.putInt(18)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

}




internal typealias Handle = Long
internal class ConcurrentHandleMap<T>(
    private val leftMap: MutableMap<Handle, T> = mutableMapOf(),
    private val rightMap: MutableMap<T, Handle> = mutableMapOf()
) {
    private val lock = java.util.concurrent.locks.ReentrantLock()
    private val currentHandle = AtomicLong(0L)
    private val stride = 1L

    fun insert(obj: T): Handle =
        lock.withLock {
            rightMap[obj] ?:
                currentHandle.getAndAdd(stride)
                    .also { handle ->
                        leftMap[handle] = obj
                        rightMap[obj] = handle
                    }
            }

    fun get(handle: Handle) = lock.withLock {
        leftMap[handle]
    }

    fun delete(handle: Handle) {
        this.remove(handle)
    }

    fun remove(handle: Handle): T? =
        lock.withLock {
            leftMap.remove(handle)?.let { obj ->
                rightMap.remove(obj)
                obj
            }
        }
}

interface ForeignCallback : com.sun.jna.Callback {
    public fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int
}

// Magic number for the Rust proxy to call using the same mechanism as every other method,
// to free the callback once it's dropped by Rust.
internal const val IDX_CALLBACK_FREE = 0

public abstract class FfiConverterCallbackInterface<CallbackInterface>(
    protected val foreignCallback: ForeignCallback
): FfiConverter<CallbackInterface, Handle> {
    private val handleMap = ConcurrentHandleMap<CallbackInterface>()

    // Registers the foreign callback with the Rust side.
    // This method is generated for each callback interface.
    internal abstract fun register(lib: _UniFFILib)

    fun drop(handle: Handle): RustBuffer.ByValue {
        return handleMap.remove(handle).let { RustBuffer.ByValue() }
    }

    override fun lift(value: Handle): CallbackInterface {
        return handleMap.get(value) ?: throw InternalException("No callback in handlemap; this is a Uniffi bug")
    }

    override fun read(buf: ByteBuffer) = lift(buf.getLong())

    override fun lower(value: CallbackInterface) =
        handleMap.insert(value).also {
            assert(handleMap.get(it) === value) { "Handle map is not returning the object we just placed there. This is a bug in the HandleMap." }
        }

    override fun allocationSize(value: CallbackInterface) = 8

    override fun write(value: CallbackInterface, buf: ByteBuffer) {
        buf.putLong(lower(value))
    }
}

// Declaration and FfiConverters for Callback Callback Interface

public interface Callback {
    fun `onMessage`(`crc`: ULong, `from`: ULong, `to`: ULong, `eventTime`: ULong, `msg`: List<UByte>)
    
}

// The ForeignCallback that is passed to Rust.
internal class ForeignCallbackTypeCallback : ForeignCallback {
    @Suppress("TooGenericExceptionCaught")
    override fun invoke(handle: Handle, method: Int, args: RustBuffer.ByValue, outBuf: RustBufferByReference): Int {
        val cb = FfiConverterTypeCallback.lift(handle)
        return when (method) {
            IDX_CALLBACK_FREE -> {
                FfiConverterTypeCallback.drop(handle)
                // No return value.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                0
            }
            1 -> {
                // Call the method, write to outBuf and return a status code
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs` for info
                try {
                    val buffer = this.`invokeOnMessage`(cb, args)
                    // Success
                    outBuf.setValue(buffer)
                    1
                } catch (e: Throwable) {
                    // Unexpected error
                    try {
                        // Try to serialize the error into a string
                        outBuf.setValue(FfiConverterString.lower(e.toString()))
                    } catch (e: Throwable) {
                        // If that fails, then it's time to give up and just return
                    }
                    -1
                }
            }
            
            else -> {
                // An unexpected error happened.
                // See docs of ForeignCallback in `uniffi/src/ffi/foreigncallbacks.rs`
                try {
                    // Try to serialize the error into a string
                    outBuf.setValue(FfiConverterString.lower("Invalid Callback index"))
                } catch (e: Throwable) {
                    // If that fails, then it's time to give up and just return
                }
                -1
            }
        }
    }

    
    private fun `invokeOnMessage`(kotlinCallbackInterface: Callback, args: RustBuffer.ByValue): RustBuffer.ByValue =
        try {
            val buf = args.asByteBuffer() ?: throw InternalException("No ByteBuffer in RustBuffer; this is a Uniffi bug")
            kotlinCallbackInterface.`onMessage`(
                    FfiConverterULong.read(buf), 
                    FfiConverterULong.read(buf), 
                    FfiConverterULong.read(buf), 
                    FfiConverterULong.read(buf), 
                    FfiConverterSequenceUByte.read(buf)
                    )
            .let { RustBuffer.ByValue() }
                // TODO catch errors and report them back to Rust.
                // https://github.com/mozilla/uniffi-rs/issues/351
        } finally {
            RustBuffer.free(args)
        }

    
}

// The ffiConverter which transforms the Callbacks in to Handles to pass to Rust.
public object FfiConverterTypeCallback: FfiConverterCallbackInterface<Callback>(
    foreignCallback = ForeignCallbackTypeCallback()
) {
    override fun register(lib: _UniFFILib) {
        rustCall() { status ->
            lib.ffi_LuffaSDK_a4a0_Callback_init_callback(this.foreignCallback, status)
        }
    }
}




public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeEventMeta: FfiConverterRustBuffer<EventMeta?> {
    override fun read(buf: ByteBuffer): EventMeta? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeEventMeta.read(buf)
    }

    override fun allocationSize(value: EventMeta?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeEventMeta.allocationSize(value)
        }
    }

    override fun write(value: EventMeta?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeEventMeta.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceULong: FfiConverterRustBuffer<List<ULong>> {
    override fun read(buf: ByteBuffer): List<ULong> {
        val len = buf.getInt()
        return List<ULong>(len) {
            FfiConverterULong.read(buf)
        }
    }

    override fun allocationSize(value: List<ULong>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterULong.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ULong>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterULong.write(it, buf)
        }
    }
}




public object FfiConverterSequenceString: FfiConverterRustBuffer<List<String>> {
    override fun read(buf: ByteBuffer): List<String> {
        val len = buf.getInt()
        return List<String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<String>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<String>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterString.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeChatSession: FfiConverterRustBuffer<List<ChatSession>> {
    override fun read(buf: ByteBuffer): List<ChatSession> {
        val len = buf.getInt()
        return List<ChatSession>(len) {
            FfiConverterTypeChatSession.read(buf)
        }
    }

    override fun allocationSize(value: List<ChatSession>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeChatSession.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ChatSession>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeChatSession.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeContactsView: FfiConverterRustBuffer<List<ContactsView>> {
    override fun read(buf: ByteBuffer): List<ContactsView> {
        val len = buf.getInt()
        return List<ContactsView>(len) {
            FfiConverterTypeContactsView.read(buf)
        }
    }

    override fun allocationSize(value: List<ContactsView>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeContactsView.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ContactsView>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeContactsView.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeOfferView: FfiConverterRustBuffer<List<OfferView>> {
    override fun read(buf: ByteBuffer): List<OfferView> {
        val len = buf.getInt()
        return List<OfferView>(len) {
            FfiConverterTypeOfferView.read(buf)
        }
    }

    override fun allocationSize(value: List<OfferView>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeOfferView.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<OfferView>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeOfferView.write(it, buf)
        }
    }
}

fun `publicKeyToId`(`publicKey`: List<UByte>): ULong {
    return FfiConverterULong.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_public_key_to_id(FfiConverterSequenceUByte.lower(`publicKey`), _status)
})
}


@Throws(ClientException::class)

fun `bs58Decode`(`data`: String): ULong {
    return FfiConverterULong.lift(
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_bs58_decode(FfiConverterString.lower(`data`), _status)
})
}


@Throws(ClientException::class)

fun `bs58Encode`(`data`: ULong): String {
    return FfiConverterString.lift(
    rustCallWithError(ClientException) { _status ->
    _UniFFILib.INSTANCE.LuffaSDK_a4a0_bs58_encode(FfiConverterULong.lower(`data`), _status)
})
}




