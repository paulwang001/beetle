// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!
import Foundation

// Depending on the consumer's build setup, the low-level FFI code
// might be in a separate module, or it might be compiled inline into
// this module. This is a bit of light hackery to work with both.
#if canImport(LuffaRpcTypesFFI)
import LuffaRpcTypesFFI
#endif

fileprivate extension RustBuffer {
    // Allocate a new buffer, copying the contents of a `UInt8` array.
    init(bytes: [UInt8]) {
        let rbuf = bytes.withUnsafeBufferPointer { ptr in
            RustBuffer.from(ptr)
        }
        self.init(capacity: rbuf.capacity, len: rbuf.len, data: rbuf.data)
    }

    static func from(_ ptr: UnsafeBufferPointer<UInt8>) -> RustBuffer {
        try! rustCall { ffi_LuffaRpcTypes_7e1b_rustbuffer_from_bytes(ForeignBytes(bufferPointer: ptr), $0) }
    }

    // Frees the buffer in place.
    // The buffer must not be used after this is called.
    func deallocate() {
        try! rustCall { ffi_LuffaRpcTypes_7e1b_rustbuffer_free(self, $0) }
    }
}

fileprivate extension ForeignBytes {
    init(bufferPointer: UnsafeBufferPointer<UInt8>) {
        self.init(len: Int32(bufferPointer.count), data: bufferPointer.baseAddress)
    }
}

// For every type used in the interface, we provide helper methods for conveniently
// lifting and lowering that type from C-compatible data, and for reading and writing
// values of that type in a buffer.

// Helper classes/extensions that don't change.
// Someday, this will be in a library of its own.

fileprivate extension Data {
    init(rustBuffer: RustBuffer) {
        // TODO: This copies the buffer. Can we read directly from a
        // Rust buffer?
        self.init(bytes: rustBuffer.data!, count: Int(rustBuffer.len))
    }
}

// Define reader functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.
//
// With external types, one swift source file needs to be able to call the read
// method on another source file's FfiConverter, but then what visibility
// should Reader have?
// - If Reader is fileprivate, then this means the read() must also
//   be fileprivate, which doesn't work with external types.
// - If Reader is internal/public, we'll get compile errors since both source
//   files will try define the same type.
//
// Instead, the read() method and these helper functions input a tuple of data

fileprivate func createReader(data: Data) -> (data: Data, offset: Data.Index) {
    (data: data, offset: 0)
}

// Reads an integer at the current offset, in big-endian order, and advances
// the offset on success. Throws if reading the integer would move the
// offset past the end of the buffer.
fileprivate func readInt<T: FixedWidthInteger>(_ reader: inout (data: Data, offset: Data.Index)) throws -> T {
    let range = reader.offset..<reader.offset + MemoryLayout<T>.size
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    if T.self == UInt8.self {
        let value = reader.data[reader.offset]
        reader.offset += 1
        return value as! T
    }
    var value: T = 0
    let _ = withUnsafeMutableBytes(of: &value, { reader.data.copyBytes(to: $0, from: range)})
    reader.offset = range.upperBound
    return value.bigEndian
}

// Reads an arbitrary number of bytes, to be used to read
// raw bytes, this is useful when lifting strings
fileprivate func readBytes(_ reader: inout (data: Data, offset: Data.Index), count: Int) throws -> Array<UInt8> {
    let range = reader.offset..<(reader.offset+count)
    guard reader.data.count >= range.upperBound else {
        throw UniffiInternalError.bufferOverflow
    }
    var value = [UInt8](repeating: 0, count: count)
    value.withUnsafeMutableBufferPointer({ buffer in
        reader.data.copyBytes(to: buffer, from: range)
    })
    reader.offset = range.upperBound
    return value
}

// Reads a float at the current offset.
fileprivate func readFloat(_ reader: inout (data: Data, offset: Data.Index)) throws -> Float {
    return Float(bitPattern: try readInt(&reader))
}

// Reads a float at the current offset.
fileprivate func readDouble(_ reader: inout (data: Data, offset: Data.Index)) throws -> Double {
    return Double(bitPattern: try readInt(&reader))
}

// Indicates if the offset has reached the end of the buffer.
fileprivate func hasRemaining(_ reader: (data: Data, offset: Data.Index)) -> Bool {
    return reader.offset < reader.data.count
}

// Define writer functionality.  Normally this would be defined in a class or
// struct, but we use standalone functions instead in order to make external
// types work.  See the above discussion on Readers for details.

fileprivate func createWriter() -> [UInt8] {
    return []
}

fileprivate func writeBytes<S>(_ writer: inout [UInt8], _ byteArr: S) where S: Sequence, S.Element == UInt8 {
    writer.append(contentsOf: byteArr)
}

// Writes an integer in big-endian order.
//
// Warning: make sure what you are trying to write
// is in the correct type!
fileprivate func writeInt<T: FixedWidthInteger>(_ writer: inout [UInt8], _ value: T) {
    var value = value.bigEndian
    withUnsafeBytes(of: &value) { writer.append(contentsOf: $0) }
}

fileprivate func writeFloat(_ writer: inout [UInt8], _ value: Float) {
    writeInt(&writer, value.bitPattern)
}

fileprivate func writeDouble(_ writer: inout [UInt8], _ value: Double) {
    writeInt(&writer, value.bitPattern)
}

// Protocol for types that transfer other types across the FFI. This is
// analogous go the Rust trait of the same name.
fileprivate protocol FfiConverter {
    associatedtype FfiType
    associatedtype SwiftType

    static func lift(_ value: FfiType) throws -> SwiftType
    static func lower(_ value: SwiftType) -> FfiType
    static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType
    static func write(_ value: SwiftType, into buf: inout [UInt8])
}

// Types conforming to `Primitive` pass themselves directly over the FFI.
fileprivate protocol FfiConverterPrimitive: FfiConverter where FfiType == SwiftType { }

extension FfiConverterPrimitive {
    public static func lift(_ value: FfiType) throws -> SwiftType {
        return value
    }

    public static func lower(_ value: SwiftType) -> FfiType {
        return value
    }
}

// Types conforming to `FfiConverterRustBuffer` lift and lower into a `RustBuffer`.
// Used for complex types where it's hard to write a custom lift/lower.
fileprivate protocol FfiConverterRustBuffer: FfiConverter where FfiType == RustBuffer {}

extension FfiConverterRustBuffer {
    public static func lift(_ buf: RustBuffer) throws -> SwiftType {
        var reader = createReader(data: Data(rustBuffer: buf))
        let value = try read(from: &reader)
        if hasRemaining(reader) {
            throw UniffiInternalError.incompleteData
        }
        buf.deallocate()
        return value
    }

    public static func lower(_ value: SwiftType) -> RustBuffer {
          var writer = createWriter()
          write(value, into: &writer)
          return RustBuffer(bytes: writer)
    }
}
// An error type for FFI errors. These errors occur at the UniFFI level, not
// the library level.
fileprivate enum UniffiInternalError: LocalizedError {
    case bufferOverflow
    case incompleteData
    case unexpectedOptionalTag
    case unexpectedEnumCase
    case unexpectedNullPointer
    case unexpectedRustCallStatusCode
    case unexpectedRustCallError
    case unexpectedStaleHandle
    case rustPanic(_ message: String)

    public var errorDescription: String? {
        switch self {
        case .bufferOverflow: return "Reading the requested value would read past the end of the buffer"
        case .incompleteData: return "The buffer still has data after lifting its containing value"
        case .unexpectedOptionalTag: return "Unexpected optional tag; should be 0 or 1"
        case .unexpectedEnumCase: return "Raw enum value doesn't match any cases"
        case .unexpectedNullPointer: return "Raw pointer value was null"
        case .unexpectedRustCallStatusCode: return "Unexpected RustCallStatus code"
        case .unexpectedRustCallError: return "CALL_ERROR but no errorClass specified"
        case .unexpectedStaleHandle: return "The object in the handle map has been dropped already"
        case let .rustPanic(message): return message
        }
    }
}

fileprivate let CALL_SUCCESS: Int8 = 0
fileprivate let CALL_ERROR: Int8 = 1
fileprivate let CALL_PANIC: Int8 = 2

fileprivate extension RustCallStatus {
    init() {
        self.init(
            code: CALL_SUCCESS,
            errorBuf: RustBuffer.init(
                capacity: 0,
                len: 0,
                data: nil
            )
        )
    }
}

private func rustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T {
    try makeRustCall(callback, errorHandler: {
        $0.deallocate()
        return UniffiInternalError.unexpectedRustCallError
    })
}

private func rustCallWithError<T, F: FfiConverter>
    (_ errorFfiConverter: F.Type, _ callback: (UnsafeMutablePointer<RustCallStatus>) -> T) throws -> T
    where F.SwiftType: Error, F.FfiType == RustBuffer
    {
    try makeRustCall(callback, errorHandler: { return try errorFfiConverter.lift($0) })
}

private func makeRustCall<T>(_ callback: (UnsafeMutablePointer<RustCallStatus>) -> T, errorHandler: (RustBuffer) throws -> Error) throws -> T {
    var callStatus = RustCallStatus.init()
    let returnedVal = callback(&callStatus)
    switch callStatus.code {
        case CALL_SUCCESS:
            return returnedVal

        case CALL_ERROR:
            throw try errorHandler(callStatus.errorBuf)

        case CALL_PANIC:
            // When the rust code sees a panic, it tries to construct a RustBuffer
            // with the message.  But if that code panics, then it just sends back
            // an empty buffer.
            if callStatus.errorBuf.len > 0 {
                throw UniffiInternalError.rustPanic(try FfiConverterString.lift(callStatus.errorBuf))
            } else {
                callStatus.errorBuf.deallocate()
                throw UniffiInternalError.rustPanic("Rust panic")
            }

        default:
            throw UniffiInternalError.unexpectedRustCallStatusCode
    }
}

// Public interface members begin here.


fileprivate struct FfiConverterUInt8: FfiConverterPrimitive {
    typealias FfiType = UInt8
    typealias SwiftType = UInt8

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt8 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: UInt8, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt32: FfiConverterPrimitive {
    typealias FfiType = UInt32
    typealias SwiftType = UInt32

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt32 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterUInt64: FfiConverterPrimitive {
    typealias FfiType = UInt64
    typealias SwiftType = UInt64

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> UInt64 {
        return try lift(readInt(&buf))
    }

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        writeInt(&buf, lower(value))
    }
}

fileprivate struct FfiConverterString: FfiConverter {
    typealias SwiftType = String
    typealias FfiType = RustBuffer

    public static func lift(_ value: RustBuffer) throws -> String {
        defer {
            value.deallocate()
        }
        if value.data == nil {
            return String()
        }
        let bytes = UnsafeBufferPointer<UInt8>(start: value.data!, count: Int(value.len))
        return String(bytes: bytes, encoding: String.Encoding.utf8)!
    }

    public static func lower(_ value: String) -> RustBuffer {
        return value.utf8CString.withUnsafeBufferPointer { ptr in
            // The swift string gives us int8_t, we want uint8_t.
            ptr.withMemoryRebound(to: UInt8.self) { ptr in
                // The swift string gives us a trailing null byte, we don't want it.
                let buf = UnsafeBufferPointer(rebasing: ptr.prefix(upTo: ptr.count - 1))
                return RustBuffer.from(buf)
            }
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> String {
        let len: Int32 = try readInt(&buf)
        return String(bytes: try readBytes(&buf, count: Int(len)), encoding: String.Encoding.utf8)!
    }

    public static func write(_ value: String, into buf: inout [UInt8]) {
        let len = Int32(value.utf8.count)
        writeInt(&buf, len)
        writeBytes(&buf, value.utf8)
    }
}


public struct Contacts {
    public var `did`: UInt64
    public var `type`: ContactsTypes
    public var `haveTime`: UInt64
    public var `wants`: [UInt64]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`did`: UInt64, `type`: ContactsTypes, `haveTime`: UInt64, `wants`: [UInt64]) {
        self.`did` = `did`
        self.`type` = `type`
        self.`haveTime` = `haveTime`
        self.`wants` = `wants`
    }
}


extension Contacts: Equatable, Hashable {
    public static func ==(lhs: Contacts, rhs: Contacts) -> Bool {
        if lhs.`did` != rhs.`did` {
            return false
        }
        if lhs.`type` != rhs.`type` {
            return false
        }
        if lhs.`haveTime` != rhs.`haveTime` {
            return false
        }
        if lhs.`wants` != rhs.`wants` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`did`)
        hasher.combine(`type`)
        hasher.combine(`haveTime`)
        hasher.combine(`wants`)
    }
}


public struct FfiConverterTypeContacts: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Contacts {
        return try Contacts(
            `did`: FfiConverterUInt64.read(from: &buf), 
            `type`: FfiConverterTypeContactsTypes.read(from: &buf), 
            `haveTime`: FfiConverterUInt64.read(from: &buf), 
            `wants`: FfiConverterSequenceUInt64.read(from: &buf)
        )
    }

    public static func write(_ value: Contacts, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`did`, into: &buf)
        FfiConverterTypeContactsTypes.write(value.`type`, into: &buf)
        FfiConverterUInt64.write(value.`haveTime`, into: &buf)
        FfiConverterSequenceUInt64.write(value.`wants`, into: &buf)
    }
}


public func FfiConverterTypeContacts_lift(_ buf: RustBuffer) throws -> Contacts {
    return try FfiConverterTypeContacts.lift(buf)
}

public func FfiConverterTypeContacts_lower(_ value: Contacts) -> RustBuffer {
    return FfiConverterTypeContacts.lower(value)
}


public struct ContactsToken {
    public var `publicKey`: [UInt8]
    public var `createAt`: UInt64
    public var `sign`: [UInt8]
    public var `secretKey`: [UInt8]
    public var `contactsType`: ContactsTypes
    public var `comment`: String?

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`publicKey`: [UInt8], `createAt`: UInt64, `sign`: [UInt8], `secretKey`: [UInt8], `contactsType`: ContactsTypes, `comment`: String?) {
        self.`publicKey` = `publicKey`
        self.`createAt` = `createAt`
        self.`sign` = `sign`
        self.`secretKey` = `secretKey`
        self.`contactsType` = `contactsType`
        self.`comment` = `comment`
    }
}


extension ContactsToken: Equatable, Hashable {
    public static func ==(lhs: ContactsToken, rhs: ContactsToken) -> Bool {
        if lhs.`publicKey` != rhs.`publicKey` {
            return false
        }
        if lhs.`createAt` != rhs.`createAt` {
            return false
        }
        if lhs.`sign` != rhs.`sign` {
            return false
        }
        if lhs.`secretKey` != rhs.`secretKey` {
            return false
        }
        if lhs.`contactsType` != rhs.`contactsType` {
            return false
        }
        if lhs.`comment` != rhs.`comment` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`publicKey`)
        hasher.combine(`createAt`)
        hasher.combine(`sign`)
        hasher.combine(`secretKey`)
        hasher.combine(`contactsType`)
        hasher.combine(`comment`)
    }
}


public struct FfiConverterTypeContactsToken: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactsToken {
        return try ContactsToken(
            `publicKey`: FfiConverterSequenceUInt8.read(from: &buf), 
            `createAt`: FfiConverterUInt64.read(from: &buf), 
            `sign`: FfiConverterSequenceUInt8.read(from: &buf), 
            `secretKey`: FfiConverterSequenceUInt8.read(from: &buf), 
            `contactsType`: FfiConverterTypeContactsTypes.read(from: &buf), 
            `comment`: FfiConverterOptionString.read(from: &buf)
        )
    }

    public static func write(_ value: ContactsToken, into buf: inout [UInt8]) {
        FfiConverterSequenceUInt8.write(value.`publicKey`, into: &buf)
        FfiConverterUInt64.write(value.`createAt`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`sign`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`secretKey`, into: &buf)
        FfiConverterTypeContactsTypes.write(value.`contactsType`, into: &buf)
        FfiConverterOptionString.write(value.`comment`, into: &buf)
    }
}


public func FfiConverterTypeContactsToken_lift(_ buf: RustBuffer) throws -> ContactsToken {
    return try FfiConverterTypeContactsToken.lift(buf)
}

public func FfiConverterTypeContactsToken_lower(_ value: ContactsToken) -> RustBuffer {
    return FfiConverterTypeContactsToken.lower(value)
}


public struct Event {
    public var `to`: UInt64
    public var `eventTime`: UInt64
    public var `crc`: UInt64
    public var `fromId`: UInt64
    public var `nonce`: [UInt8]?
    public var `msg`: [UInt8]

    // Default memberwise initializers are never public by default, so we
    // declare one manually.
    public init(`to`: UInt64, `eventTime`: UInt64, `crc`: UInt64, `fromId`: UInt64, `nonce`: [UInt8]?, `msg`: [UInt8]) {
        self.`to` = `to`
        self.`eventTime` = `eventTime`
        self.`crc` = `crc`
        self.`fromId` = `fromId`
        self.`nonce` = `nonce`
        self.`msg` = `msg`
    }
}


extension Event: Equatable, Hashable {
    public static func ==(lhs: Event, rhs: Event) -> Bool {
        if lhs.`to` != rhs.`to` {
            return false
        }
        if lhs.`eventTime` != rhs.`eventTime` {
            return false
        }
        if lhs.`crc` != rhs.`crc` {
            return false
        }
        if lhs.`fromId` != rhs.`fromId` {
            return false
        }
        if lhs.`nonce` != rhs.`nonce` {
            return false
        }
        if lhs.`msg` != rhs.`msg` {
            return false
        }
        return true
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(`to`)
        hasher.combine(`eventTime`)
        hasher.combine(`crc`)
        hasher.combine(`fromId`)
        hasher.combine(`nonce`)
        hasher.combine(`msg`)
    }
}


public struct FfiConverterTypeEvent: FfiConverterRustBuffer {
    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Event {
        return try Event(
            `to`: FfiConverterUInt64.read(from: &buf), 
            `eventTime`: FfiConverterUInt64.read(from: &buf), 
            `crc`: FfiConverterUInt64.read(from: &buf), 
            `fromId`: FfiConverterUInt64.read(from: &buf), 
            `nonce`: FfiConverterOptionSequenceUInt8.read(from: &buf), 
            `msg`: FfiConverterSequenceUInt8.read(from: &buf)
        )
    }

    public static func write(_ value: Event, into buf: inout [UInt8]) {
        FfiConverterUInt64.write(value.`to`, into: &buf)
        FfiConverterUInt64.write(value.`eventTime`, into: &buf)
        FfiConverterUInt64.write(value.`crc`, into: &buf)
        FfiConverterUInt64.write(value.`fromId`, into: &buf)
        FfiConverterOptionSequenceUInt8.write(value.`nonce`, into: &buf)
        FfiConverterSequenceUInt8.write(value.`msg`, into: &buf)
    }
}


public func FfiConverterTypeEvent_lift(_ buf: RustBuffer) throws -> Event {
    return try FfiConverterTypeEvent.lift(buf)
}

public func FfiConverterTypeEvent_lower(_ value: Event) -> RustBuffer {
    return FfiConverterTypeEvent.lower(value)
}

// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum AppStatus {
    
    case `active`
    case `deactive`
    case `disconnected`
    case `connected`
    case `bye`
}

public struct FfiConverterTypeAppStatus: FfiConverterRustBuffer {
    typealias SwiftType = AppStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> AppStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`active`
        
        case 2: return .`deactive`
        
        case 3: return .`disconnected`
        
        case 4: return .`connected`
        
        case 5: return .`bye`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: AppStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`active`:
            writeInt(&buf, Int32(1))
        
        
        case .`deactive`:
            writeInt(&buf, Int32(2))
        
        
        case .`disconnected`:
            writeInt(&buf, Int32(3))
        
        
        case .`connected`:
            writeInt(&buf, Int32(4))
        
        
        case .`bye`:
            writeInt(&buf, Int32(5))
        
        }
    }
}


public func FfiConverterTypeAppStatus_lift(_ buf: RustBuffer) throws -> AppStatus {
    return try FfiConverterTypeAppStatus.lift(buf)
}

public func FfiConverterTypeAppStatus_lower(_ value: AppStatus) -> RustBuffer {
    return FfiConverterTypeAppStatus.lower(value)
}


extension AppStatus: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ChatContent {
    
    case `feedback`(`crc`: UInt64, `status`: FeedbackStatus)
    case `burn`(`crc`: UInt64, `expires`: UInt64)
    case `send`(`data`: ContentData)
}

public struct FfiConverterTypeChatContent: FfiConverterRustBuffer {
    typealias SwiftType = ChatContent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ChatContent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`feedback`(
            `crc`: try FfiConverterUInt64.read(from: &buf), 
            `status`: try FfiConverterTypeFeedbackStatus.read(from: &buf)
        )
        
        case 2: return .`burn`(
            `crc`: try FfiConverterUInt64.read(from: &buf), 
            `expires`: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 3: return .`send`(
            `data`: try FfiConverterTypeContentData.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ChatContent, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`feedback`(`crc`,`status`):
            writeInt(&buf, Int32(1))
            FfiConverterUInt64.write(`crc`, into: &buf)
            FfiConverterTypeFeedbackStatus.write(`status`, into: &buf)
            
        
        case let .`burn`(`crc`,`expires`):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(`crc`, into: &buf)
            FfiConverterUInt64.write(`expires`, into: &buf)
            
        
        case let .`send`(`data`):
            writeInt(&buf, Int32(3))
            FfiConverterTypeContentData.write(`data`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeChatContent_lift(_ buf: RustBuffer) throws -> ChatContent {
    return try FfiConverterTypeChatContent.lift(buf)
}

public func FfiConverterTypeChatContent_lower(_ value: ChatContent) -> RustBuffer {
    return FfiConverterTypeChatContent.lower(value)
}


extension ChatContent: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ContactsEvent {
    
    case `offer`(`token`: ContactsToken)
    case `answer`(`token`: ContactsToken)
}

public struct FfiConverterTypeContactsEvent: FfiConverterRustBuffer {
    typealias SwiftType = ContactsEvent

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactsEvent {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`offer`(
            `token`: try FfiConverterTypeContactsToken.read(from: &buf)
        )
        
        case 2: return .`answer`(
            `token`: try FfiConverterTypeContactsToken.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContactsEvent, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`offer`(`token`):
            writeInt(&buf, Int32(1))
            FfiConverterTypeContactsToken.write(`token`, into: &buf)
            
        
        case let .`answer`(`token`):
            writeInt(&buf, Int32(2))
            FfiConverterTypeContactsToken.write(`token`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeContactsEvent_lift(_ buf: RustBuffer) throws -> ContactsEvent {
    return try FfiConverterTypeContactsEvent.lift(buf)
}

public func FfiConverterTypeContactsEvent_lower(_ value: ContactsEvent) -> RustBuffer {
    return FfiConverterTypeContactsEvent.lower(value)
}


extension ContactsEvent: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ContactsTypes {
    
    case `private`
    case `group`
}

public struct FfiConverterTypeContactsTypes: FfiConverterRustBuffer {
    typealias SwiftType = ContactsTypes

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContactsTypes {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`private`
        
        case 2: return .`group`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContactsTypes, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`private`:
            writeInt(&buf, Int32(1))
        
        
        case .`group`:
            writeInt(&buf, Int32(2))
        
        }
    }
}


public func FfiConverterTypeContactsTypes_lift(_ buf: RustBuffer) throws -> ContactsTypes {
    return try FfiConverterTypeContactsTypes.lift(buf)
}

public func FfiConverterTypeContactsTypes_lower(_ value: ContactsTypes) -> RustBuffer {
    return FfiConverterTypeContactsTypes.lower(value)
}


extension ContactsTypes: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum ContentData {
    
    case `text`(`source`: DataSource, `reference`: String?)
    case `link`(`txt`: String, `url`: String, `reference`: String?)
    case `media`(`title`: String, `mType`: MediaTypes, `source`: DataSource)
}

public struct FfiConverterTypeContentData: FfiConverterRustBuffer {
    typealias SwiftType = ContentData

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> ContentData {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`text`(
            `source`: try FfiConverterTypeDataSource.read(from: &buf), 
            `reference`: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 2: return .`link`(
            `txt`: try FfiConverterString.read(from: &buf), 
            `url`: try FfiConverterString.read(from: &buf), 
            `reference`: try FfiConverterOptionString.read(from: &buf)
        )
        
        case 3: return .`media`(
            `title`: try FfiConverterString.read(from: &buf), 
            `mType`: try FfiConverterTypeMediaTypes.read(from: &buf), 
            `source`: try FfiConverterTypeDataSource.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: ContentData, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`text`(`source`,`reference`):
            writeInt(&buf, Int32(1))
            FfiConverterTypeDataSource.write(`source`, into: &buf)
            FfiConverterOptionString.write(`reference`, into: &buf)
            
        
        case let .`link`(`txt`,`url`,`reference`):
            writeInt(&buf, Int32(2))
            FfiConverterString.write(`txt`, into: &buf)
            FfiConverterString.write(`url`, into: &buf)
            FfiConverterOptionString.write(`reference`, into: &buf)
            
        
        case let .`media`(`title`,`mType`,`source`):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(`title`, into: &buf)
            FfiConverterTypeMediaTypes.write(`mType`, into: &buf)
            FfiConverterTypeDataSource.write(`source`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeContentData_lift(_ buf: RustBuffer) throws -> ContentData {
    return try FfiConverterTypeContentData.lift(buf)
}

public func FfiConverterTypeContentData_lower(_ value: ContentData) -> RustBuffer {
    return FfiConverterTypeContentData.lower(value)
}


extension ContentData: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum DataSource {
    
    case `cid`(`cid`: [UInt8])
    case `raw`(`data`: [UInt8])
    case `text`(`content`: String)
}

public struct FfiConverterTypeDataSource: FfiConverterRustBuffer {
    typealias SwiftType = DataSource

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> DataSource {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`cid`(
            `cid`: try FfiConverterSequenceUInt8.read(from: &buf)
        )
        
        case 2: return .`raw`(
            `data`: try FfiConverterSequenceUInt8.read(from: &buf)
        )
        
        case 3: return .`text`(
            `content`: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: DataSource, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`cid`(`cid`):
            writeInt(&buf, Int32(1))
            FfiConverterSequenceUInt8.write(`cid`, into: &buf)
            
        
        case let .`raw`(`data`):
            writeInt(&buf, Int32(2))
            FfiConverterSequenceUInt8.write(`data`, into: &buf)
            
        
        case let .`text`(`content`):
            writeInt(&buf, Int32(3))
            FfiConverterString.write(`content`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeDataSource_lift(_ buf: RustBuffer) throws -> DataSource {
    return try FfiConverterTypeDataSource.lift(buf)
}

public func FfiConverterTypeDataSource_lower(_ value: DataSource) -> RustBuffer {
    return FfiConverterTypeDataSource.lower(value)
}


extension DataSource: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum FeedbackStatus {
    
    case `reach`
    case `read`
    case `fetch`
    case `notice`
}

public struct FfiConverterTypeFeedbackStatus: FfiConverterRustBuffer {
    typealias SwiftType = FeedbackStatus

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> FeedbackStatus {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`reach`
        
        case 2: return .`read`
        
        case 3: return .`fetch`
        
        case 4: return .`notice`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: FeedbackStatus, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`reach`:
            writeInt(&buf, Int32(1))
        
        
        case .`read`:
            writeInt(&buf, Int32(2))
        
        
        case .`fetch`:
            writeInt(&buf, Int32(3))
        
        
        case .`notice`:
            writeInt(&buf, Int32(4))
        
        }
    }
}


public func FfiConverterTypeFeedbackStatus_lift(_ buf: RustBuffer) throws -> FeedbackStatus {
    return try FfiConverterTypeFeedbackStatus.lift(buf)
}

public func FfiConverterTypeFeedbackStatus_lower(_ value: FeedbackStatus) -> RustBuffer {
    return FfiConverterTypeFeedbackStatus.lower(value)
}


extension FeedbackStatus: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum MediaTypes {
    
    case `file`
    case `image`
    case `audio`
    case `video`
    case `html`
    case `markdown`
}

public struct FfiConverterTypeMediaTypes: FfiConverterRustBuffer {
    typealias SwiftType = MediaTypes

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> MediaTypes {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`file`
        
        case 2: return .`image`
        
        case 3: return .`audio`
        
        case 4: return .`video`
        
        case 5: return .`html`
        
        case 6: return .`markdown`
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: MediaTypes, into buf: inout [UInt8]) {
        switch value {
        
        
        case .`file`:
            writeInt(&buf, Int32(1))
        
        
        case .`image`:
            writeInt(&buf, Int32(2))
        
        
        case .`audio`:
            writeInt(&buf, Int32(3))
        
        
        case .`video`:
            writeInt(&buf, Int32(4))
        
        
        case .`html`:
            writeInt(&buf, Int32(5))
        
        
        case .`markdown`:
            writeInt(&buf, Int32(6))
        
        }
    }
}


public func FfiConverterTypeMediaTypes_lift(_ buf: RustBuffer) throws -> MediaTypes {
    return try FfiConverterTypeMediaTypes.lift(buf)
}

public func FfiConverterTypeMediaTypes_lower(_ value: MediaTypes) -> RustBuffer {
    return FfiConverterTypeMediaTypes.lower(value)
}


extension MediaTypes: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum Message {
    
    case `statusSync`(`to`: UInt64, `fromId`: UInt64, `status`: AppStatus)
    case `feedback`(`crc`: UInt64, `status`: FeedbackStatus)
    case `relayNode`(`did`: UInt64)
    case `contactsSync`(`did`: UInt64, `contacts`: [Contacts])
    case `contactsExchange`(`exchange`: ContactsEvent)
    case `chat`(`content`: ChatContent)
    case `webRtc`(`streamId`: UInt32, `action`: RtcAction)
}

public struct FfiConverterTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = Message

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> Message {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`statusSync`(
            `to`: try FfiConverterUInt64.read(from: &buf), 
            `fromId`: try FfiConverterUInt64.read(from: &buf), 
            `status`: try FfiConverterTypeAppStatus.read(from: &buf)
        )
        
        case 2: return .`feedback`(
            `crc`: try FfiConverterUInt64.read(from: &buf), 
            `status`: try FfiConverterTypeFeedbackStatus.read(from: &buf)
        )
        
        case 3: return .`relayNode`(
            `did`: try FfiConverterUInt64.read(from: &buf)
        )
        
        case 4: return .`contactsSync`(
            `did`: try FfiConverterUInt64.read(from: &buf), 
            `contacts`: try FfiConverterSequenceTypeContacts.read(from: &buf)
        )
        
        case 5: return .`contactsExchange`(
            `exchange`: try FfiConverterTypeContactsEvent.read(from: &buf)
        )
        
        case 6: return .`chat`(
            `content`: try FfiConverterTypeChatContent.read(from: &buf)
        )
        
        case 7: return .`webRtc`(
            `streamId`: try FfiConverterUInt32.read(from: &buf), 
            `action`: try FfiConverterTypeRtcAction.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: Message, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`statusSync`(`to`,`fromId`,`status`):
            writeInt(&buf, Int32(1))
            FfiConverterUInt64.write(`to`, into: &buf)
            FfiConverterUInt64.write(`fromId`, into: &buf)
            FfiConverterTypeAppStatus.write(`status`, into: &buf)
            
        
        case let .`feedback`(`crc`,`status`):
            writeInt(&buf, Int32(2))
            FfiConverterUInt64.write(`crc`, into: &buf)
            FfiConverterTypeFeedbackStatus.write(`status`, into: &buf)
            
        
        case let .`relayNode`(`did`):
            writeInt(&buf, Int32(3))
            FfiConverterUInt64.write(`did`, into: &buf)
            
        
        case let .`contactsSync`(`did`,`contacts`):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(`did`, into: &buf)
            FfiConverterSequenceTypeContacts.write(`contacts`, into: &buf)
            
        
        case let .`contactsExchange`(`exchange`):
            writeInt(&buf, Int32(5))
            FfiConverterTypeContactsEvent.write(`exchange`, into: &buf)
            
        
        case let .`chat`(`content`):
            writeInt(&buf, Int32(6))
            FfiConverterTypeChatContent.write(`content`, into: &buf)
            
        
        case let .`webRtc`(`streamId`,`action`):
            writeInt(&buf, Int32(7))
            FfiConverterUInt32.write(`streamId`, into: &buf)
            FfiConverterTypeRtcAction.write(`action`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeMessage_lift(_ buf: RustBuffer) throws -> Message {
    return try FfiConverterTypeMessage.lift(buf)
}

public func FfiConverterTypeMessage_lower(_ value: Message) -> RustBuffer {
    return FfiConverterTypeMessage.lower(value)
}


extension Message: Equatable, Hashable {}


// Note that we don't yet support `indirect` for enums.
// See https://github.com/mozilla/uniffi-rs/issues/396 for further discussion.
public enum RtcAction {
    
    case `push`(`audioId`: UInt32, `videoId`: UInt32)
    case `pull`(`audioId`: UInt32, `videoId`: UInt32)
    case `reject`(`audioId`: UInt32, `videoId`: UInt32)
    case `status`(`timestamp`: UInt64, `code`: String)
    case `offer`(`dsp`: String)
    case `answer`(`dsp`: String)
}

public struct FfiConverterTypeRtcAction: FfiConverterRustBuffer {
    typealias SwiftType = RtcAction

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> RtcAction {
        let variant: Int32 = try readInt(&buf)
        switch variant {
        
        case 1: return .`push`(
            `audioId`: try FfiConverterUInt32.read(from: &buf), 
            `videoId`: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 2: return .`pull`(
            `audioId`: try FfiConverterUInt32.read(from: &buf), 
            `videoId`: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 3: return .`reject`(
            `audioId`: try FfiConverterUInt32.read(from: &buf), 
            `videoId`: try FfiConverterUInt32.read(from: &buf)
        )
        
        case 4: return .`status`(
            `timestamp`: try FfiConverterUInt64.read(from: &buf), 
            `code`: try FfiConverterString.read(from: &buf)
        )
        
        case 5: return .`offer`(
            `dsp`: try FfiConverterString.read(from: &buf)
        )
        
        case 6: return .`answer`(
            `dsp`: try FfiConverterString.read(from: &buf)
        )
        
        default: throw UniffiInternalError.unexpectedEnumCase
        }
    }

    public static func write(_ value: RtcAction, into buf: inout [UInt8]) {
        switch value {
        
        
        case let .`push`(`audioId`,`videoId`):
            writeInt(&buf, Int32(1))
            FfiConverterUInt32.write(`audioId`, into: &buf)
            FfiConverterUInt32.write(`videoId`, into: &buf)
            
        
        case let .`pull`(`audioId`,`videoId`):
            writeInt(&buf, Int32(2))
            FfiConverterUInt32.write(`audioId`, into: &buf)
            FfiConverterUInt32.write(`videoId`, into: &buf)
            
        
        case let .`reject`(`audioId`,`videoId`):
            writeInt(&buf, Int32(3))
            FfiConverterUInt32.write(`audioId`, into: &buf)
            FfiConverterUInt32.write(`videoId`, into: &buf)
            
        
        case let .`status`(`timestamp`,`code`):
            writeInt(&buf, Int32(4))
            FfiConverterUInt64.write(`timestamp`, into: &buf)
            FfiConverterString.write(`code`, into: &buf)
            
        
        case let .`offer`(`dsp`):
            writeInt(&buf, Int32(5))
            FfiConverterString.write(`dsp`, into: &buf)
            
        
        case let .`answer`(`dsp`):
            writeInt(&buf, Int32(6))
            FfiConverterString.write(`dsp`, into: &buf)
            
        }
    }
}


public func FfiConverterTypeRtcAction_lift(_ buf: RustBuffer) throws -> RtcAction {
    return try FfiConverterTypeRtcAction.lift(buf)
}

public func FfiConverterTypeRtcAction_lower(_ value: RtcAction) -> RustBuffer {
    return FfiConverterTypeRtcAction.lower(value)
}


extension RtcAction: Equatable, Hashable {}


fileprivate struct FfiConverterOptionString: FfiConverterRustBuffer {
    typealias SwiftType = String?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterString.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterString.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionTypeMessage: FfiConverterRustBuffer {
    typealias SwiftType = Message?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterTypeMessage.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterTypeMessage.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterOptionSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]?

    public static func write(_ value: SwiftType, into buf: inout [UInt8]) {
        guard let value = value else {
            writeInt(&buf, Int8(0))
            return
        }
        writeInt(&buf, Int8(1))
        FfiConverterSequenceUInt8.write(value, into: &buf)
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> SwiftType {
        switch try readInt(&buf) as Int8 {
        case 0: return nil
        case 1: return try FfiConverterSequenceUInt8.read(from: &buf)
        default: throw UniffiInternalError.unexpectedOptionalTag
        }
    }
}

fileprivate struct FfiConverterSequenceUInt8: FfiConverterRustBuffer {
    typealias SwiftType = [UInt8]

    public static func write(_ value: [UInt8], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt8.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt8] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt8]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt8.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceUInt64: FfiConverterRustBuffer {
    typealias SwiftType = [UInt64]

    public static func write(_ value: [UInt64], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterUInt64.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [UInt64] {
        let len: Int32 = try readInt(&buf)
        var seq = [UInt64]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterUInt64.read(from: &buf))
        }
        return seq
    }
}

fileprivate struct FfiConverterSequenceTypeContacts: FfiConverterRustBuffer {
    typealias SwiftType = [Contacts]

    public static func write(_ value: [Contacts], into buf: inout [UInt8]) {
        let len = Int32(value.count)
        writeInt(&buf, len)
        for item in value {
            FfiConverterTypeContacts.write(item, into: &buf)
        }
    }

    public static func read(from buf: inout (data: Data, offset: Data.Index)) throws -> [Contacts] {
        let len: Int32 = try readInt(&buf)
        var seq = [Contacts]()
        seq.reserveCapacity(Int(len))
        for _ in 0 ..< len {
            seq.append(try FfiConverterTypeContacts.read(from: &buf))
        }
        return seq
    }
}

public func `messageFrom`(`msg`: [UInt8])  -> Message? {
    return try! FfiConverterOptionTypeMessage.lift(
        try!
    
    rustCall() {
    
    LuffaRpcTypes_7e1b_message_from(
        FfiConverterSequenceUInt8.lower(`msg`), $0)
}
    )
}



public func `messageTo`(`msg`: Message)  -> [UInt8]? {
    return try! FfiConverterOptionSequenceUInt8.lift(
        try!
    
    rustCall() {
    
    LuffaRpcTypes_7e1b_message_to(
        FfiConverterTypeMessage.lower(`msg`), $0)
}
    )
}



/**
 * Top level initializers and tear down methods.
 *
 * This is generated by uniffi.
 */
public enum LuffaRpcTypesLifecycle {
    /**
     * Initialize the FFI and Rust library. This should be only called once per application.
     */
    func initialize() {
    }
}