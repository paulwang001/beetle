namespace LuffaRpcTypes {
   Message? message_from(sequence<u8> msg);
   sequence<u8>? message_to(Message msg);
};

dictionary Event {
    u64 to;
    u64 event_time;
    u64 crc;
    u64 from_id;
    sequence<u8>? nonce;
    sequence<u8> msg;
};

[Enum]
interface Message {
  StatusSync(u64 to,u64 from_id, AppStatus status);
  Feedback (sequence<u64> crc,u64? from_id,u64? to_id,FeedbackStatus status);
  RelayNode(u64 did);
  ContactsSync(u64 did,sequence<Contacts> contacts);
  ContactsExchange(ContactsEvent exchange);
  Chat(ChatContent content);
  WebRtc(u32 stream_id,RtcAction action);
  Ping(u64 relay_id, u64 ttl_ms);
};

dictionary Contacts {
    u64 did;
    ContactsTypes type;
};

dictionary ContactsToken {
    sequence<u8> public_key;
    sequence<u8>? group_key;
    u64 create_at;
    sequence<u8> sign;
    sequence<u8> secret_key;
    ContactsTypes contacts_type;
    string? comment;
};

[Enum]
interface RtcAction {
    Push(u32 audio_id,u32 video_id);
    Pull(u32 audio_id,u32 video_id);
    Reject(u32 audio_id,u32 video_id);
    Status(u64 timestamp,u32 code,string info);
    Offer(string dsp);
    Answer(string dsp);
};

[Enum]
interface ContactsEvent {
    Offer(ContactsToken token);
    Answer(u64 offer_crc,ContactsToken token);
    Reject(u64 offer_crc,sequence<u8> public_key);
    Join(u64 offer_crc, string group_nickname);
    Sync(u64 offer_crc, string group_nickname);
};

[Enum]
interface ChatContent {
    Feedback(u64 crc,FeedbackStatus status);
    Burn(u64 crc,u64 expires);
    Send(ContentData data);
};

[Enum]
interface ContentData {
    Text(DataSource source,string? reference);
    Link(string txt,string url,string? reference);
    Media(string title,MediaTypes m_type,DataSource source);
};
[Enum]
interface DataSource {
    Cid(sequence<u8> cid);
    Raw(sequence<u8> data);
    Text(string content);
};

enum AppStatus {
    "Active",
    "Deactive",
    "Disconnected",
    "Connected",
    "Bye",
};

enum FeedbackStatus {
    "Sending",
    "Send",
    "Routing",
    "Route",
    "Reach",
    "Read",
    "Fetch",
    "Notice",
    "Failed",
    "Reject",
};

enum ContactsTypes {
  "Private",
  "Group",
};


enum MediaTypes {
    "File",
    "Image",
    "Audio",
    "Video",
    "Html",
    "Markdown",
};