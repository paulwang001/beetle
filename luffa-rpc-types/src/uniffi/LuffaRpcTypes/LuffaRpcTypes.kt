// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package uniffi.LuffaRpcTypes;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.ByReference
import java.nio.ByteBuffer
import java.nio.ByteOrder

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_LuffaRpcTypes_f4d7_rustbuffer_alloc(size, status).also {
                if(it.data == null) {
                   throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=${size})")
               }
            }
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_LuffaRpcTypes_f4d7_rustbuffer_free(buf, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setInt(0, value.capacity)
        pointer.setInt(4, value.len)
        pointer.setPointer(8, value.data)
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}
// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): Int

    // Write a Kotlin type to a `ByteBuffer`
    fun write(value: KotlinType, buf: ByteBuffer)

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf = rbuf.data!!.getByteBuffer(0, rbuf.capacity.toLong()).also {
                it.order(ByteOrder.BIG_ENDIAN)
            }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
           val item = read(byteBuf)
           if (byteBuf.hasRemaining()) {
               throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
           }
           return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType>: FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)
    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_LuffaRpcTypes"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "LuffaRpcTypes")
            
        }
    }

    fun LuffaRpcTypes_f4d7_message_from(`msg`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun LuffaRpcTypes_f4d7_message_to(`msg`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaRpcTypes_f4d7_rustbuffer_alloc(`size`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaRpcTypes_f4d7_rustbuffer_from_bytes(`bytes`: ForeignBytes.ByValue,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_LuffaRpcTypes_f4d7_rustbuffer_free(`buf`: RustBuffer.ByValue,
    _uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_LuffaRpcTypes_f4d7_rustbuffer_reserve(`buf`: RustBuffer.ByValue,`additional`: Int,
    _uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.


public object FfiConverterUByte: FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1

    override fun write(value: UByte, buf: ByteBuffer) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt: FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4

    override fun write(value: UInt, buf: ByteBuffer) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong: FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8

    override fun write(value: ULong, buf: ByteBuffer) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterString: FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len)
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteArr.size)
        rbuf.asByteBuffer()!!.put(byteArr)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per unicode codepoint which will always be
    // enough.
    override fun allocationSize(value: String): Int {
        val sizeForLength = 4
        val sizeForString = value.length * 3
        return sizeForLength + sizeForString
    }

    override fun write(value: String, buf: ByteBuffer) {
        val byteArr = value.toByteArray(Charsets.UTF_8)
        buf.putInt(byteArr.size)
        buf.put(byteArr)
    }
}




data class Contacts (
    var `did`: ULong, 
    var `type`: ContactsTypes, 
    var `haveTime`: ULong, 
    var `wants`: List<ULong>
) {
    
}

public object FfiConverterTypeContacts: FfiConverterRustBuffer<Contacts> {
    override fun read(buf: ByteBuffer): Contacts {
        return Contacts(
            FfiConverterULong.read(buf),
            FfiConverterTypeContactsTypes.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceULong.read(buf),
        )
    }

    override fun allocationSize(value: Contacts) = (
            FfiConverterULong.allocationSize(value.`did`) +
            FfiConverterTypeContactsTypes.allocationSize(value.`type`) +
            FfiConverterULong.allocationSize(value.`haveTime`) +
            FfiConverterSequenceULong.allocationSize(value.`wants`)
    )

    override fun write(value: Contacts, buf: ByteBuffer) {
            FfiConverterULong.write(value.`did`, buf)
            FfiConverterTypeContactsTypes.write(value.`type`, buf)
            FfiConverterULong.write(value.`haveTime`, buf)
            FfiConverterSequenceULong.write(value.`wants`, buf)
    }
}




data class ContactsToken (
    var `publicKey`: List<UByte>, 
    var `groupKey`: List<UByte>?, 
    var `createAt`: ULong, 
    var `sign`: List<UByte>, 
    var `secretKey`: List<UByte>, 
    var `contactsType`: ContactsTypes, 
    var `comment`: String?
) {
    
}

public object FfiConverterTypeContactsToken: FfiConverterRustBuffer<ContactsToken> {
    override fun read(buf: ByteBuffer): ContactsToken {
        return ContactsToken(
            FfiConverterSequenceUByte.read(buf),
            FfiConverterOptionalSequenceUByte.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
            FfiConverterTypeContactsTypes.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: ContactsToken) = (
            FfiConverterSequenceUByte.allocationSize(value.`publicKey`) +
            FfiConverterOptionalSequenceUByte.allocationSize(value.`groupKey`) +
            FfiConverterULong.allocationSize(value.`createAt`) +
            FfiConverterSequenceUByte.allocationSize(value.`sign`) +
            FfiConverterSequenceUByte.allocationSize(value.`secretKey`) +
            FfiConverterTypeContactsTypes.allocationSize(value.`contactsType`) +
            FfiConverterOptionalString.allocationSize(value.`comment`)
    )

    override fun write(value: ContactsToken, buf: ByteBuffer) {
            FfiConverterSequenceUByte.write(value.`publicKey`, buf)
            FfiConverterOptionalSequenceUByte.write(value.`groupKey`, buf)
            FfiConverterULong.write(value.`createAt`, buf)
            FfiConverterSequenceUByte.write(value.`sign`, buf)
            FfiConverterSequenceUByte.write(value.`secretKey`, buf)
            FfiConverterTypeContactsTypes.write(value.`contactsType`, buf)
            FfiConverterOptionalString.write(value.`comment`, buf)
    }
}




data class Event (
    var `to`: ULong, 
    var `eventTime`: ULong, 
    var `crc`: ULong, 
    var `fromId`: ULong, 
    var `nonce`: List<UByte>?, 
    var `msg`: List<UByte>
) {
    
}

public object FfiConverterTypeEvent: FfiConverterRustBuffer<Event> {
    override fun read(buf: ByteBuffer): Event {
        return Event(
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterULong.read(buf),
            FfiConverterOptionalSequenceUByte.read(buf),
            FfiConverterSequenceUByte.read(buf),
        )
    }

    override fun allocationSize(value: Event) = (
            FfiConverterULong.allocationSize(value.`to`) +
            FfiConverterULong.allocationSize(value.`eventTime`) +
            FfiConverterULong.allocationSize(value.`crc`) +
            FfiConverterULong.allocationSize(value.`fromId`) +
            FfiConverterOptionalSequenceUByte.allocationSize(value.`nonce`) +
            FfiConverterSequenceUByte.allocationSize(value.`msg`)
    )

    override fun write(value: Event, buf: ByteBuffer) {
            FfiConverterULong.write(value.`to`, buf)
            FfiConverterULong.write(value.`eventTime`, buf)
            FfiConverterULong.write(value.`crc`, buf)
            FfiConverterULong.write(value.`fromId`, buf)
            FfiConverterOptionalSequenceUByte.write(value.`nonce`, buf)
            FfiConverterSequenceUByte.write(value.`msg`, buf)
    }
}




enum class AppStatus {
    ACTIVE,DEACTIVE,DISCONNECTED,CONNECTED,BYE;
}

public object FfiConverterTypeAppStatus: FfiConverterRustBuffer<AppStatus> {
    override fun read(buf: ByteBuffer) = try {
        AppStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: AppStatus) = 4

    override fun write(value: AppStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class ChatContent {
    data class Feedback(
        val `crc`: ULong, 
        val `status`: FeedbackStatus
        ) : ChatContent()
    data class Burn(
        val `crc`: ULong, 
        val `expires`: ULong
        ) : ChatContent()
    data class Send(
        val `data`: ContentData
        ) : ChatContent()
    

    
}

public object FfiConverterTypeChatContent : FfiConverterRustBuffer<ChatContent>{
    override fun read(buf: ByteBuffer): ChatContent {
        return when(buf.getInt()) {
            1 -> ChatContent.Feedback(
                FfiConverterULong.read(buf),
                FfiConverterTypeFeedbackStatus.read(buf),
                )
            2 -> ChatContent.Burn(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                )
            3 -> ChatContent.Send(
                FfiConverterTypeContentData.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ChatContent) = when(value) {
        is ChatContent.Feedback -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`crc`)
                + FfiConverterTypeFeedbackStatus.allocationSize(value.`status`)
            )
        }
        is ChatContent.Burn -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`crc`)
                + FfiConverterULong.allocationSize(value.`expires`)
            )
        }
        is ChatContent.Send -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeContentData.allocationSize(value.`data`)
            )
        }
    }

    override fun write(value: ChatContent, buf: ByteBuffer) {
        when(value) {
            is ChatContent.Feedback -> {
                buf.putInt(1)
                FfiConverterULong.write(value.`crc`, buf)
                FfiConverterTypeFeedbackStatus.write(value.`status`, buf)
                Unit
            }
            is ChatContent.Burn -> {
                buf.putInt(2)
                FfiConverterULong.write(value.`crc`, buf)
                FfiConverterULong.write(value.`expires`, buf)
                Unit
            }
            is ChatContent.Send -> {
                buf.putInt(3)
                FfiConverterTypeContentData.write(value.`data`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class ContactsEvent {
    data class Offer(
        val `token`: ContactsToken
        ) : ContactsEvent()
    data class Answer(
        val `token`: ContactsToken
        ) : ContactsEvent()
    data class Reject(
        val `crc`: ULong, 
        val `publicKey`: List<UByte>
        ) : ContactsEvent()
    

    
}

public object FfiConverterTypeContactsEvent : FfiConverterRustBuffer<ContactsEvent>{
    override fun read(buf: ByteBuffer): ContactsEvent {
        return when(buf.getInt()) {
            1 -> ContactsEvent.Offer(
                FfiConverterTypeContactsToken.read(buf),
                )
            2 -> ContactsEvent.Answer(
                FfiConverterTypeContactsToken.read(buf),
                )
            3 -> ContactsEvent.Reject(
                FfiConverterULong.read(buf),
                FfiConverterSequenceUByte.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ContactsEvent) = when(value) {
        is ContactsEvent.Offer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeContactsToken.allocationSize(value.`token`)
            )
        }
        is ContactsEvent.Answer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeContactsToken.allocationSize(value.`token`)
            )
        }
        is ContactsEvent.Reject -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`crc`)
                + FfiConverterSequenceUByte.allocationSize(value.`publicKey`)
            )
        }
    }

    override fun write(value: ContactsEvent, buf: ByteBuffer) {
        when(value) {
            is ContactsEvent.Offer -> {
                buf.putInt(1)
                FfiConverterTypeContactsToken.write(value.`token`, buf)
                Unit
            }
            is ContactsEvent.Answer -> {
                buf.putInt(2)
                FfiConverterTypeContactsToken.write(value.`token`, buf)
                Unit
            }
            is ContactsEvent.Reject -> {
                buf.putInt(3)
                FfiConverterULong.write(value.`crc`, buf)
                FfiConverterSequenceUByte.write(value.`publicKey`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class ContactsTypes {
    PRIVATE,GROUP;
}

public object FfiConverterTypeContactsTypes: FfiConverterRustBuffer<ContactsTypes> {
    override fun read(buf: ByteBuffer) = try {
        ContactsTypes.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: ContactsTypes) = 4

    override fun write(value: ContactsTypes, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class ContentData {
    data class Text(
        val `source`: DataSource, 
        val `reference`: String?
        ) : ContentData()
    data class Link(
        val `txt`: String, 
        val `url`: String, 
        val `reference`: String?
        ) : ContentData()
    data class Media(
        val `title`: String, 
        val `mType`: MediaTypes, 
        val `source`: DataSource
        ) : ContentData()
    

    
}

public object FfiConverterTypeContentData : FfiConverterRustBuffer<ContentData>{
    override fun read(buf: ByteBuffer): ContentData {
        return when(buf.getInt()) {
            1 -> ContentData.Text(
                FfiConverterTypeDataSource.read(buf),
                FfiConverterOptionalString.read(buf),
                )
            2 -> ContentData.Link(
                FfiConverterString.read(buf),
                FfiConverterString.read(buf),
                FfiConverterOptionalString.read(buf),
                )
            3 -> ContentData.Media(
                FfiConverterString.read(buf),
                FfiConverterTypeMediaTypes.read(buf),
                FfiConverterTypeDataSource.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: ContentData) = when(value) {
        is ContentData.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeDataSource.allocationSize(value.`source`)
                + FfiConverterOptionalString.allocationSize(value.`reference`)
            )
        }
        is ContentData.Link -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`txt`)
                + FfiConverterString.allocationSize(value.`url`)
                + FfiConverterOptionalString.allocationSize(value.`reference`)
            )
        }
        is ContentData.Media -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`title`)
                + FfiConverterTypeMediaTypes.allocationSize(value.`mType`)
                + FfiConverterTypeDataSource.allocationSize(value.`source`)
            )
        }
    }

    override fun write(value: ContentData, buf: ByteBuffer) {
        when(value) {
            is ContentData.Text -> {
                buf.putInt(1)
                FfiConverterTypeDataSource.write(value.`source`, buf)
                FfiConverterOptionalString.write(value.`reference`, buf)
                Unit
            }
            is ContentData.Link -> {
                buf.putInt(2)
                FfiConverterString.write(value.`txt`, buf)
                FfiConverterString.write(value.`url`, buf)
                FfiConverterOptionalString.write(value.`reference`, buf)
                Unit
            }
            is ContentData.Media -> {
                buf.putInt(3)
                FfiConverterString.write(value.`title`, buf)
                FfiConverterTypeMediaTypes.write(value.`mType`, buf)
                FfiConverterTypeDataSource.write(value.`source`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class DataSource {
    data class Cid(
        val `cid`: List<UByte>
        ) : DataSource()
    data class Raw(
        val `data`: List<UByte>
        ) : DataSource()
    data class Text(
        val `content`: String
        ) : DataSource()
    

    
}

public object FfiConverterTypeDataSource : FfiConverterRustBuffer<DataSource>{
    override fun read(buf: ByteBuffer): DataSource {
        return when(buf.getInt()) {
            1 -> DataSource.Cid(
                FfiConverterSequenceUByte.read(buf),
                )
            2 -> DataSource.Raw(
                FfiConverterSequenceUByte.read(buf),
                )
            3 -> DataSource.Text(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: DataSource) = when(value) {
        is DataSource.Cid -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterSequenceUByte.allocationSize(value.`cid`)
            )
        }
        is DataSource.Raw -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterSequenceUByte.allocationSize(value.`data`)
            )
        }
        is DataSource.Text -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`content`)
            )
        }
    }

    override fun write(value: DataSource, buf: ByteBuffer) {
        when(value) {
            is DataSource.Cid -> {
                buf.putInt(1)
                FfiConverterSequenceUByte.write(value.`cid`, buf)
                Unit
            }
            is DataSource.Raw -> {
                buf.putInt(2)
                FfiConverterSequenceUByte.write(value.`data`, buf)
                Unit
            }
            is DataSource.Text -> {
                buf.putInt(3)
                FfiConverterString.write(value.`content`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






enum class FeedbackStatus {
    SENDING,SEND,ROUTING,ROUTE,REACH,READ,FETCH,NOTICE,FAILED,REJECT;
}

public object FfiConverterTypeFeedbackStatus: FfiConverterRustBuffer<FeedbackStatus> {
    override fun read(buf: ByteBuffer) = try {
        FeedbackStatus.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: FeedbackStatus) = 4

    override fun write(value: FeedbackStatus, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






enum class MediaTypes {
    FILE,IMAGE,AUDIO,VIDEO,HTML,MARKDOWN;
}

public object FfiConverterTypeMediaTypes: FfiConverterRustBuffer<MediaTypes> {
    override fun read(buf: ByteBuffer) = try {
        MediaTypes.values()[buf.getInt() - 1]
    } catch (e: IndexOutOfBoundsException) {
        throw RuntimeException("invalid enum value, something is very wrong!!", e)
    }

    override fun allocationSize(value: MediaTypes) = 4

    override fun write(value: MediaTypes, buf: ByteBuffer) {
        buf.putInt(value.ordinal + 1)
    }
}






sealed class Message {
    data class StatusSync(
        val `to`: ULong, 
        val `fromId`: ULong, 
        val `status`: AppStatus
        ) : Message()
    data class Feedback(
        val `crc`: List<ULong>, 
        val `fromId`: ULong?, 
        val `toId`: ULong?, 
        val `status`: FeedbackStatus
        ) : Message()
    data class RelayNode(
        val `did`: ULong
        ) : Message()
    data class ContactsSync(
        val `did`: ULong, 
        val `contacts`: List<Contacts>
        ) : Message()
    data class ContactsExchange(
        val `exchange`: ContactsEvent
        ) : Message()
    data class Chat(
        val `content`: ChatContent
        ) : Message()
    data class WebRtc(
        val `streamId`: UInt, 
        val `action`: RtcAction
        ) : Message()
    

    
}

public object FfiConverterTypeMessage : FfiConverterRustBuffer<Message>{
    override fun read(buf: ByteBuffer): Message {
        return when(buf.getInt()) {
            1 -> Message.StatusSync(
                FfiConverterULong.read(buf),
                FfiConverterULong.read(buf),
                FfiConverterTypeAppStatus.read(buf),
                )
            2 -> Message.Feedback(
                FfiConverterSequenceULong.read(buf),
                FfiConverterOptionalULong.read(buf),
                FfiConverterOptionalULong.read(buf),
                FfiConverterTypeFeedbackStatus.read(buf),
                )
            3 -> Message.RelayNode(
                FfiConverterULong.read(buf),
                )
            4 -> Message.ContactsSync(
                FfiConverterULong.read(buf),
                FfiConverterSequenceTypeContacts.read(buf),
                )
            5 -> Message.ContactsExchange(
                FfiConverterTypeContactsEvent.read(buf),
                )
            6 -> Message.Chat(
                FfiConverterTypeChatContent.read(buf),
                )
            7 -> Message.WebRtc(
                FfiConverterUInt.read(buf),
                FfiConverterTypeRtcAction.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: Message) = when(value) {
        is Message.StatusSync -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`to`)
                + FfiConverterULong.allocationSize(value.`fromId`)
                + FfiConverterTypeAppStatus.allocationSize(value.`status`)
            )
        }
        is Message.Feedback -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterSequenceULong.allocationSize(value.`crc`)
                + FfiConverterOptionalULong.allocationSize(value.`fromId`)
                + FfiConverterOptionalULong.allocationSize(value.`toId`)
                + FfiConverterTypeFeedbackStatus.allocationSize(value.`status`)
            )
        }
        is Message.RelayNode -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`did`)
            )
        }
        is Message.ContactsSync -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`did`)
                + FfiConverterSequenceTypeContacts.allocationSize(value.`contacts`)
            )
        }
        is Message.ContactsExchange -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeContactsEvent.allocationSize(value.`exchange`)
            )
        }
        is Message.Chat -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterTypeChatContent.allocationSize(value.`content`)
            )
        }
        is Message.WebRtc -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUInt.allocationSize(value.`streamId`)
                + FfiConverterTypeRtcAction.allocationSize(value.`action`)
            )
        }
    }

    override fun write(value: Message, buf: ByteBuffer) {
        when(value) {
            is Message.StatusSync -> {
                buf.putInt(1)
                FfiConverterULong.write(value.`to`, buf)
                FfiConverterULong.write(value.`fromId`, buf)
                FfiConverterTypeAppStatus.write(value.`status`, buf)
                Unit
            }
            is Message.Feedback -> {
                buf.putInt(2)
                FfiConverterSequenceULong.write(value.`crc`, buf)
                FfiConverterOptionalULong.write(value.`fromId`, buf)
                FfiConverterOptionalULong.write(value.`toId`, buf)
                FfiConverterTypeFeedbackStatus.write(value.`status`, buf)
                Unit
            }
            is Message.RelayNode -> {
                buf.putInt(3)
                FfiConverterULong.write(value.`did`, buf)
                Unit
            }
            is Message.ContactsSync -> {
                buf.putInt(4)
                FfiConverterULong.write(value.`did`, buf)
                FfiConverterSequenceTypeContacts.write(value.`contacts`, buf)
                Unit
            }
            is Message.ContactsExchange -> {
                buf.putInt(5)
                FfiConverterTypeContactsEvent.write(value.`exchange`, buf)
                Unit
            }
            is Message.Chat -> {
                buf.putInt(6)
                FfiConverterTypeChatContent.write(value.`content`, buf)
                Unit
            }
            is Message.WebRtc -> {
                buf.putInt(7)
                FfiConverterUInt.write(value.`streamId`, buf)
                FfiConverterTypeRtcAction.write(value.`action`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






sealed class RtcAction {
    data class Push(
        val `audioId`: UInt, 
        val `videoId`: UInt
        ) : RtcAction()
    data class Pull(
        val `audioId`: UInt, 
        val `videoId`: UInt
        ) : RtcAction()
    data class Reject(
        val `audioId`: UInt, 
        val `videoId`: UInt
        ) : RtcAction()
    data class Status(
        val `timestamp`: ULong, 
        val `code`: UInt, 
        val `info`: String
        ) : RtcAction()
    data class Offer(
        val `dsp`: String
        ) : RtcAction()
    data class Answer(
        val `dsp`: String
        ) : RtcAction()
    

    
}

public object FfiConverterTypeRtcAction : FfiConverterRustBuffer<RtcAction>{
    override fun read(buf: ByteBuffer): RtcAction {
        return when(buf.getInt()) {
            1 -> RtcAction.Push(
                FfiConverterUInt.read(buf),
                FfiConverterUInt.read(buf),
                )
            2 -> RtcAction.Pull(
                FfiConverterUInt.read(buf),
                FfiConverterUInt.read(buf),
                )
            3 -> RtcAction.Reject(
                FfiConverterUInt.read(buf),
                FfiConverterUInt.read(buf),
                )
            4 -> RtcAction.Status(
                FfiConverterULong.read(buf),
                FfiConverterUInt.read(buf),
                FfiConverterString.read(buf),
                )
            5 -> RtcAction.Offer(
                FfiConverterString.read(buf),
                )
            6 -> RtcAction.Answer(
                FfiConverterString.read(buf),
                )
            else -> throw RuntimeException("invalid enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: RtcAction) = when(value) {
        is RtcAction.Push -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUInt.allocationSize(value.`audioId`)
                + FfiConverterUInt.allocationSize(value.`videoId`)
            )
        }
        is RtcAction.Pull -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUInt.allocationSize(value.`audioId`)
                + FfiConverterUInt.allocationSize(value.`videoId`)
            )
        }
        is RtcAction.Reject -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterUInt.allocationSize(value.`audioId`)
                + FfiConverterUInt.allocationSize(value.`videoId`)
            )
        }
        is RtcAction.Status -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterULong.allocationSize(value.`timestamp`)
                + FfiConverterUInt.allocationSize(value.`code`)
                + FfiConverterString.allocationSize(value.`info`)
            )
        }
        is RtcAction.Offer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`dsp`)
            )
        }
        is RtcAction.Answer -> {
            // Add the size for the Int that specifies the variant plus the size needed for all fields
            (
                4
                + FfiConverterString.allocationSize(value.`dsp`)
            )
        }
    }

    override fun write(value: RtcAction, buf: ByteBuffer) {
        when(value) {
            is RtcAction.Push -> {
                buf.putInt(1)
                FfiConverterUInt.write(value.`audioId`, buf)
                FfiConverterUInt.write(value.`videoId`, buf)
                Unit
            }
            is RtcAction.Pull -> {
                buf.putInt(2)
                FfiConverterUInt.write(value.`audioId`, buf)
                FfiConverterUInt.write(value.`videoId`, buf)
                Unit
            }
            is RtcAction.Reject -> {
                buf.putInt(3)
                FfiConverterUInt.write(value.`audioId`, buf)
                FfiConverterUInt.write(value.`videoId`, buf)
                Unit
            }
            is RtcAction.Status -> {
                buf.putInt(4)
                FfiConverterULong.write(value.`timestamp`, buf)
                FfiConverterUInt.write(value.`code`, buf)
                FfiConverterString.write(value.`info`, buf)
                Unit
            }
            is RtcAction.Offer -> {
                buf.putInt(5)
                FfiConverterString.write(value.`dsp`, buf)
                Unit
            }
            is RtcAction.Answer -> {
                buf.putInt(6)
                FfiConverterString.write(value.`dsp`, buf)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}






public object FfiConverterOptionalULong: FfiConverterRustBuffer<ULong?> {
    override fun read(buf: ByteBuffer): ULong? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterULong.read(buf)
    }

    override fun allocationSize(value: ULong?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterULong.allocationSize(value)
        }
    }

    override fun write(value: ULong?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterULong.write(value, buf)
        }
    }
}




public object FfiConverterOptionalString: FfiConverterRustBuffer<String?> {
    override fun read(buf: ByteBuffer): String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: String?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(value: String?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}




public object FfiConverterOptionalTypeMessage: FfiConverterRustBuffer<Message?> {
    override fun read(buf: ByteBuffer): Message? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterTypeMessage.read(buf)
    }

    override fun allocationSize(value: Message?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterTypeMessage.allocationSize(value)
        }
    }

    override fun write(value: Message?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterTypeMessage.write(value, buf)
        }
    }
}




public object FfiConverterOptionalSequenceUByte: FfiConverterRustBuffer<List<UByte>?> {
    override fun read(buf: ByteBuffer): List<UByte>? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterSequenceUByte.read(buf)
    }

    override fun allocationSize(value: List<UByte>?): Int {
        if (value == null) {
            return 1
        } else {
            return 1 + FfiConverterSequenceUByte.allocationSize(value)
        }
    }

    override fun write(value: List<UByte>?, buf: ByteBuffer) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterSequenceUByte.write(value, buf)
        }
    }
}




public object FfiConverterSequenceUByte: FfiConverterRustBuffer<List<UByte>> {
    override fun read(buf: ByteBuffer): List<UByte> {
        val len = buf.getInt()
        return List<UByte>(len) {
            FfiConverterUByte.read(buf)
        }
    }

    override fun allocationSize(value: List<UByte>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterUByte.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<UByte>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterUByte.write(it, buf)
        }
    }
}




public object FfiConverterSequenceULong: FfiConverterRustBuffer<List<ULong>> {
    override fun read(buf: ByteBuffer): List<ULong> {
        val len = buf.getInt()
        return List<ULong>(len) {
            FfiConverterULong.read(buf)
        }
    }

    override fun allocationSize(value: List<ULong>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterULong.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<ULong>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterULong.write(it, buf)
        }
    }
}




public object FfiConverterSequenceTypeContacts: FfiConverterRustBuffer<List<Contacts>> {
    override fun read(buf: ByteBuffer): List<Contacts> {
        val len = buf.getInt()
        return List<Contacts>(len) {
            FfiConverterTypeContacts.read(buf)
        }
    }

    override fun allocationSize(value: List<Contacts>): Int {
        val sizeForLength = 4
        val sizeForItems = value.map { FfiConverterTypeContacts.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(value: List<Contacts>, buf: ByteBuffer) {
        buf.putInt(value.size)
        value.forEach {
            FfiConverterTypeContacts.write(it, buf)
        }
    }
}

fun `messageFrom`(`msg`: List<UByte>): Message? {
    return FfiConverterOptionalTypeMessage.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.LuffaRpcTypes_f4d7_message_from(FfiConverterSequenceUByte.lower(`msg`), _status)
})
}



fun `messageTo`(`msg`: Message): List<UByte>? {
    return FfiConverterOptionalSequenceUByte.lift(
    rustCall() { _status ->
    _UniFFILib.INSTANCE.LuffaRpcTypes_f4d7_message_to(FfiConverterTypeMessage.lower(`msg`), _status)
})
}




